{"version":3,"file":"loritta-parent-spicy-morenitta.js","sources":["collections/Collections.kt","kotlin/collections.kt","generated/_Collections.kt","collections/Maps.kt","kotlin/text/regex.kt","../../../../../common/src/main/kotlin/kotlinx/serialization/SerialImplicits.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/AudioRecordingRoute.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","kotlin/math.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/request/builders.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/DiscordBotBrasileiroRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/FanArtsRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/GuildDashboard.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/RssFeedsRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/TwitchRoute.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/statement/HttpStatement.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/TwitterRoute.kt","collections/Sets.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/SpicyMorenitta.kt","util/Standard.kt","coroutines/Continuation.kt","generated/_Sequences.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/com.fasterxml.jackson.annotation/JsonCreator.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/com.fasterxml.jackson.annotation/JsonProperty.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureAutoroleView.kt","generated/_Arrays.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureEconomyView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureMemberCounterView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/DocumentExtensions.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureMiscellaneousConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureModerationView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureProfileView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/ConfigureWelcomerView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/LoriDashboard.kt","util/Lazy.kt","generated/_Maps.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/LoriUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/application/ApplicationCall.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/CookiesUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/DoNotRemoveDeadCodeWorkaround.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/GlobalCount.kt","kotlin/text/string.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/BaseRoute.kt","org.w3c/org.w3c.dom.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/CommandsRoute.kt","../../../../../ktor-client/ktor-client-core/common/src/io/ktor/client/call/HttpClientCall.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/AuditLogRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/DashboardUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/BadgeRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/DailyMultiplierRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/GeneralConfigRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/LevelUpRoute.kt","text/Strings.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/MusicConfigRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/PremiumKeyRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/guilds/dashboard/YouTubeRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/HomeRoute.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/TranslateRoute.kt","org.w3c/org.w3c.files.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/routes/UpdateNavbarSizePostRender.kt","../../../../../common/src/internal/DispatchedTask.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/SpicyMorenittaLauncher.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/trunfo/Trunfo.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/trunfo/TrunfoGame.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/ActionType.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/AdvertisementUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/AuthUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/BetterDocument.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/DateSerializer.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/DateUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/DelayedTyping.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/FanArt.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/FanArtArtist.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/GoogleAdSense.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/GoogleRecaptchaUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/HttpRequest.kt","util/Result.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/HttpResponse.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/levelup/LevelUpAnnouncementType.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/locale/BaseLocale.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/Logging.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/LoriUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/Placeholders.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/PremiumPlans.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/SaveUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/SpicyDashboard.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/TemmieDiscordGuild.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/TingleOptions.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/UserIdentification.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/WebsiteExtensions.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/utils/WebsiteUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/DailyView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/dashboard/ReactionRoleView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/dashboard/ServerConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/dashboard/Stuff.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/DonateView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/ProfileListView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/ReputationView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/views/ShipEffectsView.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/WebsiteThemeUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/ws/PingCommand.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/net/perfectdreams/spicymorenitta/ws/WebSocketCommand.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/SaveStuff.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/AutoroleConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/CounterThemes.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/CounterUtils.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/EconomyConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/MemberCounterConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/ModerationConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/userdata/WelcomerConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/AbstractCommand.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/CountUpOptions.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/Emote.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/grecaptcha.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LegacyBaseLocale.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LoriColor.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LorittaDailyPayload.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LorittaPartner.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LorittaProfile.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/LoriWebCodes.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/Member.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/Role.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/ServerConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/ShowdownExtension.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/TextChannel.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/TextChannelConfig.kt","../../../../../loritta-website/spicy-morenitta/src/main/kotlin/utils/TingleExt.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? = nativePattern.findNext(input.toString(), startIndex)\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> =\n        generateSequence({ find(input, startIndex) }, { match -> match.next() })\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2014-2019 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.client.request\n\nimport io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.statement.*\nimport io.ktor.client.utils.*\nimport io.ktor.http.*\n\n/**\n * Executes a [HttpClient] request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.request(\n    builder: HttpRequestBuilder = HttpRequestBuilder()\n): T = HttpStatement(builder, this).receive()\n\n/**\n * Executes a [HttpClient] request, with the information configured in [builder] block\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.request(block: HttpRequestBuilder.() -> Unit): T =\n    request(HttpRequestBuilder().apply(block))\n\n/**\n * Executes a [HttpClient] request, with the [urlString] and the information configured in builder [block]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.request(\n    urlString: String, block: HttpRequestBuilder.() -> Unit = {}\n): T = request(HttpRequestBuilder().apply {\n    url(urlString)\n    block()\n})\n\n/**\n * Executes a [HttpClient] request, with the [url] and the information configured in builder [block]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.request(\n    url: Url, block: HttpRequestBuilder.() -> Unit = {}\n): T = request(HttpRequestBuilder().apply {\n    url(url)\n    block()\n})\n\n/**\n * Executes a [HttpClient] GET request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.get(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Get\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] POST request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.post(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Post\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] PUT request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.put(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Put\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] DELETE request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.delete(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Delete\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.options(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Options\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] PATCH request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.patch(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Patch\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] HEAD request, with the information from the [builder]\n * and tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.head(builder: HttpRequestBuilder): T {\n    builder.method = HttpMethod.Head\n    return request(builder)\n}\n\n/**\n * Executes a [HttpClient] GET request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.get(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Get\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] POST request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.post(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Post\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] PUT request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.put(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Put\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] DELETE request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.delete(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Delete\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] PATCH request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.patch(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Patch\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] HEAD request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.head(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Head\n    this.body = body\n    apply(block)\n}\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the specified [scheme], [host], [port], [path] and [body].\n * And allows to further configure the request, using a [block] receiving an [HttpRequestBuilder].\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.options(\n    scheme: String = \"http\", host: String = \"localhost\", port: Int = DEFAULT_PORT,\n    path: String = \"/\",\n    body: Any = EmptyContent,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = request {\n    url(scheme, host, port, path)\n    method = HttpMethod.Options\n    this.body = body\n    apply(block)\n}\n\n/**\n * Creates a [HttpRequestBuilder] and configures it with a [block] of code.\n */\nfun request(block: HttpRequestBuilder.() -> Unit): HttpRequestBuilder = HttpRequestBuilder().apply(block)\n\n/**\n * Executes a [HttpClient] GET request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.get(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = get {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] POST request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.post(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = post {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] PUT request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.put(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = put {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] DELETE request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.delete(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = delete {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] OPTIONS request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.options(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = options {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] PATCH request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.patch(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = patch {\n    url.takeFrom(urlString)\n    block()\n}\n\n/**\n * Executes a [HttpClient] HEAD request, with the specified [url] as URL and\n * an optional [block] receiving an [HttpRequestBuilder] for further configuring the request.\n *\n * Tries to receive a specific type [T], if fails, an exception is thrown.\n */\nsuspend inline fun <reified T> HttpClient.head(\n    urlString: String,\n    block: HttpRequestBuilder.() -> Unit = {}\n): T = head {\n    url.takeFrom(urlString)\n    block()\n}\n",null,null,null,null,null,"/*\n * Copyright 2014-2019 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.client.statement\n\nimport io.ktor.client.*\nimport io.ktor.client.call.*\nimport io.ktor.client.request.*\nimport io.ktor.http.*\nimport io.ktor.utils.io.*\nimport io.ktor.utils.io.charsets.*\nimport io.ktor.utils.io.core.*\nimport kotlinx.coroutines.*\nimport kotlin.reflect.*\n\n/**\n * Prepared statement for http client request.\n * This statement doesn't perform any network requests until [execute] method call.\n *\n * [HttpStatement] is safe to execute multiple times.\n */\nclass HttpStatement(\n    private val builder: HttpRequestBuilder,\n    private val client: HttpClient\n) {\n    /**\n     * Executes this statement and call the [block] with the streaming [response].\n     *\n     * The [response] argument holds a network connection until the [block] isn't completed. You can read the body\n     * on-demand or at once with [receive<T>()] method.\n     *\n     * After [block] finishes, [response] will be completed body will be discarded or released depends on the engine configuration.\n     *\n     * Please note: the [response] instance will be canceled and shouldn't be passed outside of [block].\n     */\n    suspend fun <T> execute(block: suspend (response: HttpResponse) -> T): T {\n        val response: HttpResponse = executeUnsafe()\n\n        try {\n            return block(response)\n        } finally {\n            response.cleanup()\n        }\n    }\n\n    /**\n     * Executes this statement and download the response.\n     * After the method finishes, the client downloads the response body in memory and release the connection.\n     *\n     * To receive exact type you consider using [receive<T>()] method.\n     */\n    suspend fun execute(): HttpResponse = execute {\n        val savedCall = it.call.save()\n        savedCall.response\n    }\n\n    /**\n     * Executes this statement and run [HttpClient.responsePipeline] with the response and expected type [T].\n     *\n     * Note if T is a streaming type, you should manage how to close it manually.\n     */\n    @UseExperimental(ExperimentalStdlibApi::class)\n    suspend inline fun <reified T> receive(): T = when (typeOf<T>()) {\n        typeOf<HttpStatement>() -> this as T\n        typeOf<HttpResponse>() -> execute() as T\n        else -> {\n            val response = executeUnsafe()\n            try {\n                response.receive<T>()\n            } finally {\n                response.complete()\n            }\n        }\n    }\n\n    /**\n     * Executes this statement and run the [block] with a [HttpClient.responsePipeline] execution result.\n     *\n     * Note that T can be a streamed type such as [ByteReadChannel].\n     */\n    suspend inline fun <reified T, R> receive(crossinline block: suspend (response: T) -> R): R {\n        val response: HttpResponse = executeUnsafe()\n        try {\n            val result = response.receive<T>()\n            return block(result)\n        } finally {\n            response.cleanup()\n        }\n    }\n\n    /**\n     * Return [HttpResponse] with open streaming body.\n     */\n    @PublishedApi\n    internal suspend fun executeUnsafe(): HttpResponse {\n        val builder = HttpRequestBuilder().takeFrom(builder)\n        @Suppress(\"DEPRECATION_ERROR\")\n        val call = client.execute(builder)\n        return call.response\n    }\n\n    /**\n     * Complete [HttpResponse] and release resources.\n     */\n    @PublishedApi\n    internal suspend fun HttpResponse.cleanup() {\n        val job = coroutineContext[Job]!! as CompletableJob\n\n        job.apply {\n            complete()\n            try {\n                content.cancel()\n            } catch (_: Throwable) {\n            }\n            join()\n        }\n    }\n\n    override fun toString(): String = \"HttpStatement[${builder.url.buildString()}]\"\n}\n\n@Deprecated(\n    \"[HttpStatement] isn't closeable.\",\n    level = DeprecationLevel.ERROR,\n    replaceWith = ReplaceWith(\"this.execute<T>(block)\")\n)\n@Suppress(\"unused\", \"KDocMissingDocumentation\", \"UNUSED_PARAMETER\")\nfun <T> HttpStatement.use(block: suspend (response: HttpResponse) -> T) {\n}\n\n\n@Deprecated(\n    \"Unbound [HttpResponse] is deprecated. Consider using [execute()] instead.\",\n    level = DeprecationLevel.ERROR, replaceWith = ReplaceWith(\"this.execute()\")\n)\n@Suppress(\"KDocMissingDocumentation\", \"unused\")\nval HttpStatement.response: HttpResponse\n    get() = error(\"Unbound [HttpClientCall] is deprecated. Consider using [HttpResponse] instead.\")\n\n/**\n * Read the [HttpResponse.content] as a String. You can pass an optional [charset]\n * to specify a charset in the case no one is specified as part of the Content-Type response.\n * If no charset specified either as parameter or as part of the response,\n * [io.ktor.client.features.HttpPlainText] settings will be used.\n *\n * Note that [fallbackCharset] parameter will be ignored if the response already has a charset.\n *      So it just acts as a fallback, honoring the server preference.\n */\nsuspend fun HttpResponse.readText(fallbackCharset: Charset? = null): String {\n    val originCharset = charset() ?: fallbackCharset ?: Charsets.UTF_8\n    val decoder = originCharset.newDecoder()\n    val input = receive<Input>()\n\n    return decoder.decode(input)\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()",null,"/*\n * Copyright 2014-2019 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.\n */\n\npackage io.ktor.client.call\n\nimport io.ktor.client.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.util.*\nimport io.ktor.utils.io.*\nimport kotlinx.atomicfu.*\nimport kotlinx.coroutines.*\nimport kotlin.coroutines.*\nimport kotlin.reflect.*\n\n@InternalAPI\ninternal fun HttpClientCall(\n    client: HttpClient,\n    requestData: HttpRequestData,\n    responseData: HttpResponseData\n): HttpClientCall = HttpClientCall(client).apply {\n    request = DefaultHttpRequest(this, requestData)\n    response = DefaultHttpResponse(this, responseData)\n\n    if (responseData.body !is ByteReadChannel) {\n        attributes.put(HttpClientCall.CustomResponse, responseData.body)\n    }\n}\n\n/**\n * A class that represents a single pair of [request] and [response] for a specific [HttpClient].\n *\n * @property client: client that executed the call.\n */\nopen class HttpClientCall internal constructor(\n    val client: HttpClient\n) : CoroutineScope {\n    private val received = atomic(false)\n\n    override val coroutineContext: CoroutineContext get() = response.coroutineContext\n\n    /**\n     * Typed [Attributes] associated to this call serving as a lightweight container.\n     */\n    val attributes: Attributes get() = request.attributes\n\n    /**\n     * Represents the [request] sent by the client\n     */\n    lateinit var request: HttpRequest\n        internal set\n\n    /**\n     * Represents the [response] sent by the server.\n     */\n    lateinit var response: HttpResponse\n        internal set\n\n    /**\n     * Tries to receive the payload of the [response] as a specific expected type provided in [info].\n     * Returns [response] if [info] corresponds to [HttpResponse].\n     *\n     * @throws NoTransformationFoundException If no transformation is found for the type [info].\n     * @throws DoubleReceiveException If already called [receive].\n     */\n    suspend fun receive(info: TypeInfo): Any {\n        try {\n            if (response.instanceOf(info.type)) return response\n            if (!received.compareAndSet(false, true)) throw DoubleReceiveException(this)\n\n            val responseData = attributes.getOrNull(CustomResponse) ?: response.content\n\n            val subject = HttpResponseContainer(info, responseData)\n            val result = client.responsePipeline.execute(this, subject).response\n            if (!result.instanceOf(info.type)) {\n                val from = result::class\n                val to = info.type\n                throw NoTransformationFoundException(response, from, to)\n            }\n\n            return result\n        } catch (cause: Throwable) {\n            response.cancel(\"Receive failed\", cause)\n            throw cause\n        }\n    }\n\n    override fun toString(): String = \"HttpClientCall[${request.url}, ${response.status}]\"\n\n    companion object {\n        /**\n         * [CustomResponse] key used to process the response of custom type in case of [HttpClientEngine] can't return body bytes directly.\n         * If present, attribute value will be an initial value for [HttpResponseContainer] in [HttpClient.responsePipeline].\n         *\n         * Example: [WebSocketSession]\n         */\n        @KtorExperimentalAPI\n        val CustomResponse: AttributeKey<Any> = AttributeKey<Any>(\"CustomResponse\")\n    }\n}\n\n/**\n * Raw http call produced by engine.\n *\n * @property request - executed http request.\n * @property response - raw http response\n */\n@Deprecated(\n    \"HttpEngineCall deprecated.\",\n    level = DeprecationLevel.ERROR,\n    replaceWith = ReplaceWith(\"HttpResponseData\")\n)\n@InternalAPI\ndata class HttpEngineCall(val request: HttpRequest, val response: HttpResponse)\n\n/**\n * Constructs a [HttpClientCall] from this [HttpClient] and with the specified [HttpRequestBuilder]\n * configured inside the [block].\n */\n@Deprecated(\n    \"Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(block)] in instead.\",\n    level = DeprecationLevel.ERROR,\n    replaceWith = ReplaceWith(\n        \"this.request<HttpResponse>(block)\",\n        \"io.ktor.client.request.request\",\n        \"io.ktor.client.statement.*\"\n    )\n)\n@Suppress(\"RedundantSuspendModifier\", \"unused\", \"UNUSED_PARAMETER\")\nsuspend fun HttpClient.call(block: suspend HttpRequestBuilder.() -> Unit = {}): HttpClientCall =\n    error(\"Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(block)] in instead.\")\n\n/**\n * Tries to receive the payload of the [response] as an specific type [T].\n *\n * @throws NoTransformationFoundException If no transformation is found for the type [T].\n * @throws DoubleReceiveException If already called [receive].\n */\nsuspend inline fun <reified T> HttpClientCall.receive(): T = receive(typeInfo<T>()) as T\n\n/**\n * Tries to receive the payload of the [response] as an specific type [T].\n *\n * @throws NoTransformationFoundException If no transformation is found for the type [T].\n * @throws DoubleReceiveException If already called [receive].\n */\nsuspend inline fun <reified T> HttpResponse.receive(): T = call.receive(typeInfo<T>()) as T\n\n/**\n * Exception representing that the response payload has already been received.\n */\n@Suppress(\"KDocMissingDocumentation\")\nclass DoubleReceiveException(call: HttpClientCall) : IllegalStateException() {\n    override val message: String = \"Response already received: $call\"\n}\n\n/**\n * Exception representing fail of the response pipeline\n * [cause] contains origin pipeline exception\n */\n@Suppress(\"KDocMissingDocumentation\", \"unused\")\nclass ReceivePipelineException(\n    val request: HttpClientCall,\n    val info: TypeInfo,\n    override val cause: Throwable\n) : IllegalStateException(\"Fail to run receive pipeline: $cause\")\n\n/**\n * Exception representing the no transformation was found.\n * It includes the received type and the expected type as part of the message.\n */\n@Suppress(\"KDocMissingDocumentation\")\nclass NoTransformationFoundException(\n    response: HttpResponse,\n    from: KClass<*>, to: KClass<*>\n) : UnsupportedOperationException() {\n    override val message: String? = \"\"\"No transformation found: $from -> $to\n        |with response from ${response.request.url}:\n        |status: ${response.status}\n        |response headers: \n        |${response.headers.flattenEntries().joinToString { (key, value) -> \"$key: $value\\n\" }}\n    \"\"\".trimMargin()\n}\n",null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [exception] as failure.\n         */\n        @InlineOnly\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result\n * if invocation was successful, catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated exception\n * if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onFailure] function is rethrown by this function.\n *\n * This function is shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the the result of [onSuccess] for encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onSuccess] or by [onFailure] function is rethrown by this function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [map] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on encapsulated exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAmFA,+C;oBCrEA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BC2iDA,oD;2BCz/CA,oD;6BCwCI,6C;;;;;;;qBC9DJ,2F;;;;;;4BCVwB,qC;4BAKA,oC;4BAKA,oC;4BAKA,sC;4BAKA,qC;4BAKA,oC;4BAKA,sC;4BAKA,qC;4BAKA,sC;;;;;;;;;;;;;;;;;;;;;kBAqMI,6B;;gCJ4gC5B,yD;yBAAA,gD;oCAllCA,oC;mBAysBA,4C;qBKlzBA,mB;mBCjFA,wB;iBH+BA,+E;;;;;;;;;;;eIq9BA,I;;;;;;;;;;;;;;;;;cC56BA,4C;cAAA,gE;mBAAA,kD;;;;iBAAA,uE;;;aCtDkB,wB;;cAaI,yB;aAGA,wB;;cC8CI,yB;;YAII,uB;;;;;;;kBZrB9B,0C;eEwnCA,wC;eA9uBA,2B;eAAA,wC;;;;;;;;;WWxYc,sB;aAoBQ,wB;;;;;;;;;YCrBd,mB;;;cCqQ+B,yB;;;;aAgH7B,wB;iBC/XiB,oE;WCmK4C,gB;;;2BCpLvE,mD;;;eCE+B,0B;aACI,wB;;;;;;;;;;;;;mBjB+5CnC,oC;;;;iCkB77CA,iC;;;;;eCcA,oB;oBA6FA,uD;8BAAA,sD;;;;;;;;;;;;;;;;;;;;;;;;qBCyYA,0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECzgBA,uB;G;;;;;;ECA6B,4B;IAAC,gB;G;;;;;;ECQ9B,iC;IAAA,qC;IACC,yD;G;;SAAA,Y;;;MAAA,kC;K;SAAA,wB;MAAA,0C;K;;EASgB,4D;G;;;;;EAwBA,8D;G;;;;;EAGS,wD;IACtB,U;EACD,C;EAnC6C,wE;IAAA,qB;MAKlC,Q;MAJX,0CAAe,2BAAc,mB;MAE7B,iBzBwEqD,gB;MyBtEvB,gBAAnB,uCAAa,M;MCmrGhB,kBAAS,gB;MAiaA,U;MAAhB,uD;QAAgB,cAAhB,iB;QAAsB,IDplHgB,CColHF,ODplHM,aColHpB,C;UAAwB,WAAY,WAAI,OAAJ,C;;MDplHhD,OCqlHH,WDrlHG,W;MAAX,O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A,+B;UAAhB,OAAgB,gBAAhB,C;YAAgB,2B;YAAM,II3FgC,OJ2FlB,OI3FqB,GAAH,WJ2FhC,C;cAAwB,eAAO,O;cAAP,iB;;;UAC9C,MAAM,gCAAuB,wDAAvB,C;;;QI5FU,2B;QACA,qBAAU,QAAS,UAAnB,UAA8B,2DAA9B,C;;MAMR,W;IAAA,C;G;EAOW,wE;IACH,gBAAM,mH;IACV,W;EAAA,C;EAEuB,kF;IAAA,qB;MAYN,Q;MuBxItB,U;MvB6HS,kBAA8D,CuB7HvE,CAAK,SvB6HsB,QuB7HtB,evB6HwD,QuB7HxD,CAAL,6DvB6HuE,a;MuB7HvE,U;MvB8HmD,CuB9HnD,CAAK,SvB8HI,QuB9HJ,evB8HoC,QuB9HpC,CAAL,6DvB8HmD,OAA1C,QAAuD,CAAG,cAAc,EAAjB,mB;MAEb,gBAAZ,mB;MJyhBvC,kBAAS,gB;MAyEA,U;MAAA,6B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QAAM,IIlmB6C,WJkmB/B,OIlmBkE,GAAH,SJkmB/D,OIlmB0E,GAAH,KJkmBvE,OIlmBkF,OAAX,CAAR,CAAhC,EAAqB,YAApB,cAAc,IAAM,CAArB,CJkmB7C,C;UAAwB,WAAY,WAAI,OAAJ,C;;MIlmB1C,8BJmmBT,W;MA40BS,U;MAAA,SI76C+C,OAA/C,QAAS,kBAAiB,mBAAjB,CAAsC,CJ66C/C,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QI36CY,U;QAAA,uBJ26CC,SI36CD,yC;QJ26CC,SI16CE,MAAH,eAAuB,a;;MAGtB,yC;MAAb,OAAa,cAAb,C;QAAa,sB;QuBxItB,U;QvB0IsB,CuB1ItB,CAAK,SvByIQ,QuBzIR,evByI0C,uBAAqB,IAAK,GAA1B,kBuBzI1C,CAAL,6DvB0IsB,OADT,eAC6B,S;;MAErC,W;IAAA,C;G;EAzBE,kF;IAAA,4B;MACF,kBAAK,OAAL,C;MACA,qBAAW,I;MACX,sC;MAAA,YAAwB,U;MH0EpC,wBG1EuB,SH0EvB,EAAS,KAAT,C;MGxEY,sBAAO,mDAAP,C;MAIA,oCAAuB,wEAAvB,C;MAiBJ,W;IAAA,C;G;EAee,oF;IAAC,W;EAAA,C;EAKQ,kG;IACA,kBAAK,OAAL,C;IACA,qBAAQ,uGAAR,C;IACJ,W;EAAA,C;EAEI,oG;IACA,kBAAK,gBAAL,C;IACJ,W;EAAA,C;EAVW,2F;IACX,qBAAQ,qBAAR,C;IAEA,uBAAI,6EAAJ,C;IAKA,uBAAI,+EAAJ,C;IAGJ,W;EAAA,C;EAZD,kF;IAAA,4B;MACY,IAAX,KAAW,UAAI,sEAAJ,C;MAYf,W;IAAA,C;G;EAfD,kF;IAAA,4B;MACC,4BAAG,+DAAH,C;MACA,4BAAG,0EAAH,C;MAcJ,W;IAAA,C;G;EAU8C,oG;IAC1B,qBAAQ,oCAAR,C;IACJ,W;EAAA,C;EAPA,mI;IAAA,4B;MACA,qBAAQ,mDAAR,C;MAE8B,kBAAf,sB;MAAe,gB;;QJkB9C,Q;QAAA,6B;QAAhB,OAAgB,cAAhB,C;UAAgB,yB;UAAM,IIlBgD,OJkBlC,OIlBqC,GAAH,mBJkBhD,C;YAAwB,eAAO,O;YAAP,iB;;;QAC9C,MAAM,gCAAuB,wDAAvB,C;;;MInB0B,2B;MAEA,qBAAU,QAAS,UAAnB,UAA8B,+EAA9B,C;MAIA,4BAAE,QAAS,KAAX,C;MACJ,W;IAAA,C;G;EAXD,4H;IAAA,4B;MACC,uBAAI,yHAAJ,C;MAWJ,W;IAAA,C;G;EAEqB,sF;IACA,IAAG,I;IAAhB,aAAa,cAAG,OAAH,EAAG,OAAH,kC;IAEb,cAAiB,EAAY,Q;IAC7B,cAAiB,EAAY,Q;IAE7B,WAAW,MAAO,wB;IAClB,QAAQ,UAAU,IAAK,K;IACvB,QAAQ,UAAU,IAAK,I;IAEvB,QAAQ,QAAK,CAAL,wBAAY,CAAZ,WAAR,C;IACJ,W;EAAA,C;EAsBY,6H;IAAA,4B;MACA,qBAAQ,gFAA+E,6BAAsB,WAAtB,GAAmC,GAAlH,QAAR,C;MACJ,W;IAAA,C;G;EAGI,4G;IAAA,4B;MACA,qBAAQ,wBAAsB,6DAAS,UAAG,GAAZ,CAAtB,sDAAsF,UAAG,OAAO,WAAV,GAAuB,GAA7G,QAAR,C;MACJ,W;IAAA,C;G;EAlBJ,0H;IAAA,4B;MACA,qBAAQ,eAAR,C;MAES,kBAAT,gB;MJy1ChB,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QIz1CiC,iD;QAEe,U;QAD5B,0BAA0B,wB;QACE,IAAI,2BAAJ,C;UACrB,SJs1Cd,OIt1Cc,G;;UAEH,SJo1CX,OIp1Cc,GAAH,UAAS,mBAAoB,GAApB,KAAyB,mBAAoB,OAA7C,CAAT,C;;QAHJ,kC;QAMA,uBAAI,2GAAJ,C;QAIA,2BJ60CP,O;QI50CO,uBAAI,uFJ40CX,OI50CW,CAAJ,C;;MAIR,W;IAAA,C;G;EA3CD,kH;IAAA,4B;MACC,8BAAiB,wEAAjB,C;MAaA,qBAAQ,yDAAR,C;MAE2B,kBAAZ,mB;MJ6cpC,kBAAS,gB;MAyEA,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,IIthB0C,OJshB5B,OIthB+B,GAAH,mBJshB1C,C;UAAwB,WAAY,WAAI,OAAJ,C;;MIthB9B,eJmsBrB,WA5KA,WA4KA,+BKjzBI,iDD+GmC,qB;eAA6B,Y;OC/GhE,ELizBJ,E;MI9rBqB,uBAAiD,IAAjD,C;MAEA,uBAAI,gGAAJ,C;MAqBJ,W;IAAA,C;G;EA1DD,0I;IAAA,4B;MACC,oBAAG,kHAAH,C;MAaA,oBAAG,wGAAH,C;MA6CJ,W;IAAA,C;G;EAjFF,iH;IAAA,4B;MAqBe,Q;MApBjB,qBAAQ,gDAAR,C;MAEA,oBAAG,0EAAH,C;MAkB6B,kBAAZ,mB;MJ4mC1B,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WAAc,IIlrCwB,GJkrCtC,C;;MIlrCiB,OAA0B,SJmrCpD,WInrCoD,CAA1B,W;MAAjB,OAAiB,cAAjB,C;QAAiB,0B;QACb,oBAAG,wHAAH,C;;MA6DR,W;IAAA,C;G;EA5FA,0G;IAAA,4B;MACA,kBAAK,mBAAL,C;MACA,qBAAQ,sBACA,kCADA,GAEA,4BAFA,GAGA,oBAHA,GAIA,qBAJA,GAKA,mBALR,C;MAOA,uBAAM,uGAAN,C;MAoFJ,W;IAAA,C;G;EAxIwB,4F;IAAA,4B;MACxB,yBAAI,kGAAJ,C;MAcA,yBAAM,4EAAN,C;MA4BA,yBAAI,oGAAJ,C;MA8FJ,W;IAAA,C;G;mDAjOJ,gB;IA8DiB,Q;IA5DP,gDAAS,IAAT,C;IAEN,QAAQ,IAAR,C;IACiC,gBAAf,gBAAK,U;IAAU,cAA4B,gB;IAA7D,kBJ83BG,WGz2BqE,wBAAqC,SAAvB,aAAR,iBAAQ,4DAAuB,CAArC,EAA2C,OAA3C,CHy2BrE,+BKjzBI,iBD5EW,mCC4EX,CLizBJ,E;II53BH,QAAQ,IAAR,C;IAEA,kBAA8B,MAAZ,WAAY,CAAQ,G;IAEtC,qBAAqB,eACb,oEAEQ,gBAFR,EAGQ,wGAHR,CADa,EAMb,oEAEQ,QAFR,EAGQ,sGAHR,CANa,EAWb,oEAEQ,8CAFR,EAGQ,sGAHR,CAXa,EAgBb,oEAEQ,KAFR,EAGQ,sGAHR,CAhBa,EAqBb,oEAEQ,QAFR,EAGQ,sGAHR,CArBa,EA0Bb,oEAEQ,UAFR,EAGQ,sGAHR,CA1Ba,EA+Bb,oEAEQ,QAFR,EAGQ,wGAHR,CA/Ba,EAoCb,oEAEQ,QAFR,EAGQ,wGAHR,CApCa,EAyCb,oEAEQ,0BAFR,EAGQ,sGAHR,CAzCa,E;IA+CrB,kBNYgD,gB;IMVhD,SNUgD,gB;IMRnC,6B;gBAAb,OAAa,cAAb,C;MAAa,sB;MACT,IAAI,OAAA,IAAK,MAAL,EAAc,IAAd,CAAJ,C;QACI,EAAG,WACK,IADL,C;;;QAIiB,sB;;UJwJhB,U;UAAA,SIxJa,EJwJb,W;UAAhB,OAAgB,gBAAhB,C;YAAgB,2B;YAAM,IIxJwB,OAAK,OAAL,EJwJV,OIxJwB,GAAd,CJwJxB,C;cAAwB,qBAAO,O;cAAP,uB;;;UAC9C,qBAAO,I;;;QIzJK,mC;QAEA,IAAI,kBAAJ,C;UACI,EAAG,cAAO,UAAP,C;UACH,WAAY,WACJ,8DACQ,UAAW,GADnB,EAEQ,UAAW,GAAX,UAAgB,WAAhB,CAFR,EAGQ,IAAK,GAAL,UAAU,UAAW,GAArB,CAHR,CADI,C;;;;IAYxB,oBAAM,eAAa,WAAY,KAAzB,kBAAN,E;IuBhGG,U;IvBkGH,2BuBlGG,CAAK,SvBkGmB,QuBlGnB,evBkGmD,yBuBlGnD,CAAL,6D;IvBoGkB,OAArB,oBAAqB,EAAO,kEAAP,C;EA0IzB,C;EAEA,yC;IAAA,6C;G;EAE0B,uE;;IAEd,Y;IACA,kB;IACA,Y;G;EALR,oE;;G;kFAAA,Y;;G;;;;;;;;;;;;;EAAA,sE;;;;;;G;;SAAA,Y;MAAA,gC;K;;2FAAA,yB;;;;;;G;6FAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;0FAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQiC,mF;IACzB,Y;IACA,Y;IACA,oB;G;;;;;;EAGU,yE;IACV,Y;IACA,gB;IACA,0B;G;;;;;;6DAGR,c;IACI,QACC,WADQ,iBACR,EAAS,EAAT,CoClGuD,c;IpCqGzC,eAAa,IAAI,CAAE,OAAN,I;IAA5B,OAAO,OoC3E6E,WpC2E3D,CoC3E2D,EAAsB,QAAtB,CpC2E7E,GAAqC,C;EAChD,C;;;;;;;EA3BJ,qD;IAAA,oD;MAAA,mC;;IAAA,6C;G;;;;;;EqCjOoB,yB;IAAC,gB;IACrB,mCAA6B,K;G;;SAA7B,Y;MAAA,uC;K;;wCAEA,iB;IAO0B,Q;IALtB,kBAAyC,MAAlB,aAAL,SAAK,EAAa,GAAb,CAAkB,GAAM,GAAN,E;IACzC,iBAAyC,MAAlB,aAAN,KAAM,EAAa,GAAb,CAAkB,GAAM,GAAN,E;IAEzC,uBAAuB,C;IAED,QAAI,WAAY,K;IAAhB,QAAsB,UAAW,K;IAAjC,OlCs+BsB,MAAW,KAAI,CAAJ,EAAO,CAAP,C;IkCt+BvD,iBAAc,CAAd,wB;MACI,aAAyB,UAAZ,WAAY,EAAU,KAAV,C;MACzB,aAAwB,UAAX,UAAW,EAAU,KAAV,C;MAGxB,IAAI,kBAAyB,WAAP,MAAO,EAAW,GAAX,CAAzB,IAAmD,SAAP,MAAO,EAAS,GAAT,CAAvD,C;QACI,IAAI,kBAAyB,SAAP,MAAO,EAAS,IAAT,CAA7B,C;UACI,2C;UACA,Q;;QAGJ,2C;QACA,Q;;MAGJ,IAAI,cAAJ,C;QACI,OAAO,K;MAEX,IAAI,gBAAU,MAAV,CAAJ,C;QACI,OAAO,K;MAEX,2C;;IAGJ,OAAO,I;EACX,C;kDAEA,iB;IAQ0B,Q;IAPtB,iBxCYoD,oB;IwCVpD,kBAAyC,MAAlB,aAAL,SAAK,EAAa,GAAb,CAAkB,GAAM,GAAN,E;IACzC,iBAAyC,MAAlB,aAAN,KAAM,EAAa,GAAb,CAAkB,GAAM,GAAN,E;IAEzC,uBAAuB,C;IAED,QAAI,WAAY,K;IAAhB,QAAsB,UAAW,K;IAAjC,OlCm8BsB,MAAW,KAAI,CAAJ,EAAO,CAAP,C;IkCn8BvD,iBAAc,CAAd,wB;MACI,aAAyB,UAAZ,WAAY,EAAU,KAAV,C;MACzB,aAAwB,UAAX,UAAW,EAAU,KAAV,C;MAGxB,IAAI,kBAAyB,WAAP,MAAO,EAAW,GAAX,CAAzB,IAAmD,SAAP,MAAO,EAAS,GAAT,CAAvD,C;QACI,IAAI,kBAAyB,SAAP,MAAO,EAAS,IAAT,CAA7B,C;UACI,2C;UACA,Q;;QAGJ,UAAuD,aAAnB,aAAlB,aAAP,MAAO,EAAa,GAAb,CAAkB,EAAa,IAAb,CAAmB,EAAa,GAAb,C;QAAvD,YAA4E,0BAAU,G;QAAtF,UxCyHZ,aAAI,GAAJ,EAAS,KAAT,C;QwCvHY,2C;QACA,Q;;MAGJ,IAAI,cAAJ,C;QACI,OAAO,U;MAEX,IAAI,gBAAU,MAAV,CAAJ,C;QACI,OAAO,U;MAEX,2C;;IAGJ,OAAO,U;EACX,C;yCAEA,gB;IACI,mCAAsB,IAAtB,C;IACA,2BAAc,IAAd,C;EACJ,C;iCAEA,Y;EAAqB,C;sDAErB,gB;IAEI,Q;IdlGG,U;IciGH,yBdjGG,CAAK,SciGiB,QdjGjB,eciGkD,edjGlD,CAAL,6D;IckGH,+FAAoC,KAApC,Q;EACJ,C;8CAEA,gB;IAE4B,Q;IADxB,IAAI,IAAK,QAAL,QAAJ,C;MACwB,OAAT,QAAS,K;MAAT,iB;QAAiB,M;;MAA5B,WAAW,I;MdvGZ,U;McyG6C,CdzG7C,CAAK,ScyGJ,QdzGI,ecyG4B,UdzG5B,CAAL,6DcyG6C,U;MAC5C,iBAAiB,IAAK,QAAQ,kBAAiB,QAAjB,C;MAC9B,qB3CzB4C,gB;M2C2B5C,YAAO,UAAW,O;MvBiC1B,iBAAc,CAAd,UAAsB,KAAtB,U;QuBhC4B,U;QAAhB,gBAAgB,qCCy5I6B,WxBx3I9C,KwBw3I8C,CDz5I7B,2C;QAChB,IAAI,SAAU,cAAa,KAAb,CAAV,QAAJ,C;UACmB,yBAAI,SAAU,WAAU,IAAV,CAAd,C;UACL,MAAV,SAAU,C;;;MzCqpDK,U;MAAA,SyChpDvB,sCAAe,SAAS,kBzCgpDD,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QAAa,OyChpDkB,iB;;MACtD,sCAAe,SAAS,kBAAkB,Q;MdvH3C,U;McyHC,iBdzHD,CAAK,ScyHa,IdzHb,ecyHuC,QdzHvC,CAAL,6D;Mc0HC,IAAI,kBAAJ,C;QAEI,IAAK,cAAa,IAAK,QAAlB,EAA2B,UAA3B,C;;;QAEL,IAAK,aAAY,IAAK,QAAjB,C;;MAGT,gBAAgB,IAAK,WCs4I4B,CDt4IjB,CCs4IiB,C;MDp4IjD,IAAI,iBAAJ,C;QzC46CQ,U;QAAA,SyC16CJ,czC06CI,W;QAAhB,OAAgB,gBAAhB,C;UAAgB,6B;UyCz6Cc,U;UAAd,aAAuC,CAAzB,uBzCy6CD,SyCz6CC,0CAAyB,W;UACvC,oBAAM,0BAAuB,MAA7B,E;UACA,gBAAgB,QAAS,eAAc,QAAd,C;UACzB,mBAAmB,QAAS,gBAAe,MAAf,C;UAC5B,SAAU,aAAY,YAAZ,C;UACL,iBAAY,SAAZ,C;;;MAIb,2BAAc,Y;MAEd,sCAAe,SAAS,qB;MACxB,sCAAe,SAAS,gB;MAGxB,MAAO,UAAS,GAAT,EAAc,GAAd,C;;EAEf,C;EAiB0C,iF;IdxKnC,Q;IcyKqB,kBdzKrB,CAAK,OcyKkC,QdzKlC,ecyK2D,edzK3D,CAAL,yD;Ic2KqB,IAAgB,SAAZ,WAAY,EAAS,UAAT,CAAhB,C;MACgB,YAAZ,WAAY,GAAY,UAAZ,E;;;MAEA,SAAZ,WAAY,GAAS,UAAT,E;;IAEpB,W;EAAA,C;EATkD,iF;IAClD,+BAAkB,mEAAlB,C;IASJ,W;EAAA,C;EAXiC,sE;IAAA,4B;MACjC,WAAY,wCAAZ,EAAsD,4DAAtD,C;MAWJ,W;IAAA,C;G;EAE0B,sF;IAAA,4B;MACtB,mBAAY,CAAO,SAAP,C;MAChB,W;IAAA,C;G;EAnBA,oF;IAAA,4B;MACA,kBAAK,cAAL,C;MAEA,eAAc,qBAAd,EAAqC,4DAArC,C;MAcA,eAAc,UAAd,EAA0B,4EAA1B,C;MAGJ,W;IAAA,C;G;EAM8B,uF;IAAA,4B;MACtB,oBAAa,CAAO,SAAP,C;MACjB,W;IAAA,C;G;EANA,gF;IAAA,4B;MACA,kBAAK,eAAL,C;MACA,sC;MAAA,UAAW,8B;MxCK3B,wBAAI,GAAJ,EwCL6D,MxCK7D,C;MwCHgB,eAAc,UAAd,EAA0B,6EAA1B,C;MAGJ,W;IAAA,C;G;EAhCA,mG;IAAA,4B;MACA,kBAAK,iBAAL,C;MAEA,uBAAI,0EAAJ,C;MAsBA,uBAAI,sEAAJ,C;MAQJ,W;IAAA,C;G;EAlCW,qF;IAAA,4B;MACX,yBAAI,6FAAJ,C;MAkCJ,W;IAAA,C;G;gDAzCJ,qC;IdzJO,Q;Ic6JH,cd7JG,CAAK,Oc6JM,Qd7JN,ec6JsC,Ud7JtC,CAAL,yD;Ic+JK,OAAR,OAAQ,EAAO,2DAAP,C;EAoCZ,C;;;;;;;;;EEtLe,0B;IA8If,qC;IA9IyC,sCAA2B,WAA3B,C;IAAzB,U;G;;SAEZ,Y;MAAQ,W;K;;EAO0B,yD;IAC1B,eAAO,MAAO,SAAS,OAAnB,iCAAqD,cAAO,GAAhE,C;IACJ,W;EAAA,C;EAUkB,2D;IAElB,W;EAAA,C;EAiB2C,8E;IACf,qBAAQ,eAAR,C;IACA,sC;IAAA,UAAW,gB;IAAX,YAA+B,yB;I1CyInE,wBAAI,GAAJ,EAAS,KAAT,C;I0CxIoC,sC;IAAA,YAAW,c;IAAX,cAA6B,Y;I1CwIjE,wBAAI,KAAJ,EAAS,OAAT,C;I0CvIoC,sC;IAAA,YAAW,gB;I1CuI/C,wBAAI,KAAJ,E0CvImE,M1CuInE,C;I0CtIgC,W;EAAA,C;EAEO,gF;IACH,4BAAC,oDAAD,C;IACJ,W;EAAA,C;EAZA,uE;IACA,qBAAQ,qBAAR,C;IAEA,eAAI,aAAJ,EAAmB,yDAAnB,C;IAOA,kCAAO,2DAAP,C;IAGJ,W;EAAA,C;EAkB2B,qF;IACnB,qBAAQ,kCAAR,C;IACJ,W;EAAA,C;EAhB0B,uF;IAAA,4B;MACF,IAAN,I;MAAA,QAAM,gBAAN,M;aACd,Q;UAA0B,sD;UAA1B,K;aACA,S;UAA2B,uD;UAA3B,K;aACA,W;UAA6B,6D;UAA7B,K;aACA,K;UAAuB,yD;UAAvB,K;aACA,O;UAAyB,qD;UAAzB,K;aACA,O;UAAyB,+D;UAAzB,K;aACA,O;UAAyB,6D;UAAzB,K;aACA,S;UAA2B,qE;UAA3B,K;aACA,U;UAA4B,qE;UAA5B,K;gBACQ,oE;UAVM,K;;MAAlB,sB;MAaA,uBAAU,WAAV,UAAuB,gEAAvB,C;MAGJ,W;IAAA,C;G;EAKW,4F;IAEH,W;EAAA,C;EAJA,uF;IACA,qBAAQ,qBAAR,C;IACA,sBAAG,uEAAH,C;IAGJ,W;EAAA,C;EACE,uF;IAEF,W;EAAA,C;EATwB,gF;IACxB,uBAAI,kEAAJ,C;IAMA,qBAAE,kEAAF,C;IAGJ,W;EAAA,C;EA9BmB,gF;IAAA,4B;MACnB,eAAc,cAAd,EAA8B,6EAA9B,C;MAmBA,eAAc,YAAd,EAA4B,2DAA5B,C;MAWJ,W;IAAA,C;G;EAIW,uF;IAAC,W;EAAA,C;EAOW,0G;IACC,4BAAC,SAAD,C;IACJ,W;EAAA,C;EACG,4G;IACC,4BAAC,iBAAD,C;IACJ,W;EAAA,C;EACG,4G;IACC,4BAAC,SAAD,C;IACJ,W;EAAA,C;EATD,mG;IACC,8BAAG,qFAAH,C;IAGA,8BAAG,uFAAH,C;IAGA,8BAAG,uFAAH,C;IAGJ,W;EAAA,C;EAXE,8F;IACF,sBAAG,8EAAH,C;IAWJ,W;EAAA,C;EAQqB,kH;IAAA,4B;MACD,4BAAE,eAAQ,MAAV,C;MACJ,W;IAAA,C;G;EANL,2G;IAAA,4B;MACC,4BAAE,eAAQ,MAAV,C;MACA,IAAI,eAAQ,MAAR,QAAJ,C;QACI,4BAAE,GAAF,C;QACA,wBAAK,wGAAL,C;;MAIR,W;IAAA,C;G;EACG,2G;IAAA,4B;MACY,Q;MAAX,4BAAG,CAAQ,OAAR,eAAQ,YAAR,mBAAuB,GAA1B,C;MACJ,W;IAAA,C;G;EACG,2G;IAAA,4B;MACC,4BAAmB,aAAhB,eAAQ,QAAQ,EAAa,IAAb,CAAnB,C;MACJ,W;IAAA,C;G;EAfD,oG;IAAA,4B;MACC,sBAAG,iGAAH,C;MASA,sBAAG,iGAAH,C;MAGA,sBAAG,iGAAH,C;MAGJ,W;IAAA,C;G;EAlCuB,8F;IAAA,4B;MAiBX,Q;MAhBhB,qBAAQ,cAAR,C;MAEA,yBAAM,yEAAN,C;MAcgB,kC;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QACZ,wBAAG,kFAAH,C;;MAkBR,W;IAAA,C;G;EAvCwB,uF;IAAA,4B;MACxB,sBAAG,kEAAH,C;MAEA,iBAAgB,aAAhB,EAA+B,oFAA/B,C;MAqCJ,W;IAAA,C;G;EAzCoB,gF;IAAA,4B;MACpB,eAAc,YAAd,EAA4B,6EAA5B,C;MAyCJ,W;IAAA,C;G;EA/FmB,wG;IAAA,4B;MACnB,kBAAK,cAAwC,QAA5B,gBAAS,KH8Hc,cG9HK,EAAQ,GAAR,EAAa,GAAb,CAA7C,C;MAEA,IAAI,kBAAQ,CAAR,KAAa,CAAjB,C;QACI,uBAAI,kDAAJ,C;;MAgBJ,eAAc,OAAd,EAAuB,sEAAvB,C;MAiCA,eAAe,OAAf,EAAwB,sEAAxB,C;MA2CJ,W;IAAA,C;G;EArGc,mG;IAAA,4B;MACd,cAAkB,kBAAQ,CAAR,KAAa,CAAjB,GAAoB,cAApB,GAAwC,a;MACtD,IAAI,oBAAS,CAAb,C;QACI,WAAW,Y;MAEf,iBAAc,OAAd,EAAuB,8FAAvB,C;MAiGJ,W;IAAA,C;G;EA1HH,gI;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,wC;IAAA,oD;IAAA,4B;EAgIT,C;;;;;;;;+DAhIS,Y;;;;;YAiBY,Q;YAhBC,kBAAL,I;YAAK,Q;YAAA,Q;;mB7BoCI,kB;;+BAFsB,M;;;Y6BlCd,oC;iD7BsCf,W,EAAA,W;;;+BAAA,W;;;;;;;;;;;;;;;;;;;;;;;;;;Y8BgFqC,gB;4BAAA,kK;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,kF;;;;;;;;;;;;;;;;;;;;;;;;;;;;YDtHpD,aAAkB,a;YAImC,gBAAV,0B;YAA3C,WxCYoE,wBAAqC,SAAvB,aAAR,iBAAQ,6CAAuB,CAArC,EwCZI,MxCYJ,C;YwCVpE,2DAAqB,uBAArB,C;YhB5BD,U;YgB8BC,iBhB9BD,CAAK,SgB8Ba,QhB9Bb,egB8B6C,WhB9B7C,CAAL,6D;YgBgCC,gBAAY,CAAZ,C;YAEW,OAAX,UAAW,EAAO,sCAAP,C;YAI+B,kBAAT,wB;YnBypGlC,kBAAS,gB;YAiaA,U;YAAhB,yD;cAAgB,cAAhB,mB;cAAsB,IAAc,OmB1jHuB,0BnB0jHrC,C;gBAAwB,WAAY,WAAI,OAAJ,C;;;YmB1jHjC,OnB2jHlB,WmB3jHkB,W;YAAjB,OAAiB,cAAjB,C;cAAiB,0B;c3CmnBlB,oBAAS,gB;cAyEA,U;cAAA,S2C3rBW,I3C2rBX,W;cAAhB,OAAgB,gBAAhB,C;gBAAgB,6B;gBAAM,IAAc,S2C3rBQ,SAAH,a3C2rBnB,C;kBAAwB,aAAY,WAAI,SAAJ,C;;c2C3rB9C,e3C4rBL,a;c2C3rBK,I7CgI4C,C6ChIxC,Q7CgIyC,U6ChI7C,C;gBACe,OAAX,UAAW,EAAO,iEAAP,C;gBAuGX,yB;;;;YA1HR,OA8HA,+BAAE,oBA9HF,M;;;;;;;;;;;;;;;;EA+HJ,C;EAhIS,6E;IAAA,yD;qBAAA,oH;UAAA,S;eAAA,Q;;eAAA,uB;IAgIT,C;G;6CApIJ,gB;IAEU,iEAAS,IAAT,C;IAEN,MAAE,gBAAO,yCAAP,C;EAiIN,C;uDAEA,4B;EACA,C;EAEA,mC;IAAA,uC;G;EAEiB,6F;;IAML,2B;MAAA,cAC2B,I;IAC3B,qB;MAAA,QACqB,I;IAPrB,gB;IACA,kB;IACA,sB;IACA,wB;IACA,8B;IAEA,kB;G;EATR,qD;;G;mEAAA,Y;;G;;;;;;;;;;;;;EAAA,uD;;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;4EAAA,yB;;;;;;iCAQmC,I;;2BAEN,I;;;G;8EAV7B,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;2EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQmC,I;;;;oBAEN,I;;;;;;;;;;;;;;;;EAXjC,+C;IAAA,8C;MAAA,6B;;IAAA,uC;G;;;;;;ElCnJJ,qC;IAAkC,qBAAU,yBAAV,C;G;EAKK,sG;IAAA,wC;IAAA,6B;IAAA,yB;EAgB/B,C;;;;;;;;2EAhB+B,Y;;;;;YkBb5B,Q;YlBcC,YkBdD,CAAK,OlBcQ,QkBdR,elBciC,4CkBdjC,CAAL,yD;YlBeO,SAAN,KAAM,GAAS,UAAT,EAAqB,eAArB,EAAsC,YAAtC,E;YACA,YAAN,KAAM,GAAY,WAAZ,E;YAEN,gB;4BAAA,iB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YkBlBD,U;YlBoBC,YkBpBD,CAAK,SlBoBQ,QkBpBR,elBoBiC,yCkBpBjC,CAAL,6D;YlBqBO,SAAN,KAAM,GAAS,UAAT,EAAqB,eAAr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T,qBAAQ,cAAO,UAAU,eAAzB,C;MACJ,W;IAAA,C;G;EAR0B,uE;IAAA,4B;MACf,Q;MAAA,OAAA,UAAG,MAAH,W;MAAf,OAAe,cAAf,C;QAAe,wB;QACX,+BACkB,SADlB,EAEE,8DAFF,C;;MAQR,W;IAAA,C;G;EAjBa,2E;IAAA,4B;MACT,kBAAR,e;MwBjOQ,Q;MAAA,OAAA,WjC8KoE,QAAQ,W;MiC9K5F,OAAgB,cAAhB,C;QAAgB,yB;QxBkOJ,cAAa,gCAAb,EAA+C,gDwBlO9B,OxBkO8B,cAA/C,C;QAKA,iBAAc,kBAAd,EAAkC,kDwBvOjB,OxBuOiB,CAAlC,C;;MAYR,W;IAAA,C;G;iDA5BJ,kB;IV03BO,kBAAU,oB;IA8BD,Q;IAAA,OUv5BE,MVu5BF,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MACZ,UAAsB,OUx5BY,UAAU,WAAW,WAAxB,GAAqC,GAArC,YVw5BT,OUx5BuD,UAAU,cAAxD,C;MTzD5B,U;MADP,YDm9Be,WCn9BH,WDm9BwB,GCn9BxB,C;MACL,IAAI,aAAJ,C;QACH,aDi9BuC,gB;QAA5B,WCh9BX,aDg9BgC,GCh9BhC,EAAS,MAAT,C;QACA,e;;;QAEA,c;;MD68BA,iB;MACA,IAAK,WAAmB,OAAnB,C;;IU15BL,cV45BG,W;IU15BH,UAAa,iC;IACb,IAAI,OAAJ,IAAe,M;IiBxWZ,U;IjB0WH,oBiB1WG,CAAK,SjB0WY,QiB1WZ,ejB0W4C,kBiB1W5C,CAAL,6D;IjB2WW,MAAd,aAAc,C;IAEA,OAAd,aAAc,EAAO,iDAAP,C;IAoBd,MAAE,gB;EACN,C;EAEA,yD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,uD;IAAA,0D;K;IACI,4G;IACA,8H;IACA,kH;IACA,gH;G;;EAHA,mE;IAAA,6C;IAAA,2D;G;;EACA,4E;IAAA,6C;IAAA,oE;G;;EACA,sE;IAAA,6C;IAAA,8D;G;;EACA,qE;IAAA,6C;IAAA,6D;G;;;;;;EAJJ,mD;IAAA,iQ;G;;EAAA,wD;IAAA,a;MAAA,kB;QAAA,gE;MAAA,2B;QAAA,yE;MAAA,qB;QAAA,mE;MAAA,oB;QAAA,kE;MAAA,QAAA,6G;;G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yTR,GAAG,2BAAH,IAAqG,CtBzT7F,CAAK,SsByTqB,QtBzTrB,esByTuD,+BtBzTvD,CAAL,6DsByT6F,S;MtBzT7F,U;MsB0TR,GAAG,yBAAH,IAAiG,CtB1TzF,CAAK,SsB0TmB,QtB1TnB,esB0TqD,6BtB1TrD,CAAL,6DsB0TyF,S;MtB1TzF,U;MsB2TR,GAAG,sBAAH,IAA2F,CtB3TnF,CAAK,SsB2TgB,QtB3ThB,esB2TkD,0BtB3TlD,CAAL,6DsB2TmF,S;MAC3C,gBAApB,2C;MjD69BpB,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,6B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WAAc,IiDniC0B,WjDmiCxC,C;;MiDniCjB,GAAG,qBAAH,IjDoiCQ,W;M2Bh2CA,U;MsB6TR,wBAAkF,CtB7T1E,CAAK,SsB6TW,QtB7TX,esB6T6C,sBtB7T7C,CAAL,6DsB6T0E,S;MAClF,GAAG,mBAAH,IAA0B,iB;MAC1B,IAAI,iBAAJ,C;QtB/TQ,U;QsBgUP,GAAG,oBAAH,IAAwF,CtBhUjF,CAAK,SsBgUe,QtBhUf,esBgUoD,sBtBhUpD,CAAL,6DsBgUiF,O;;MAE1F,W;IAAA,C;G;6CAZD,Y;IACC,uBAAU,qBAAY,SAAZ,EAAgC,2CAAhC,C;EAYX,C;;;;;;EtCvTD,0B;IAAA,8B;IACI,kBAAiB,K;G;;;;;;;EADrB,sC;IAAA,qC;MAAA,oB;;IAAA,8B;G;EAOgB,0D;IAAA,4B;MACA,4BAAE,aAAF,C;MACJ,W;IAAA,C;G;EAE8B,8D;IAAA,4B;MACtB,4BAAE,eAAF,C;MACJ,W;IAAA,C;G;EAPqB,oE;IAAA,4B;MACzB,uBAAI,gDAAJ,C;MAGA,IAAI,uBAAJ,C;QACI,eAAc,UAAd,EAA0B,oDAA1B,C;;MAIR,W;IAAA,C;G;EAY2B,oE;IAAA,qB;MAAE,oD;MAAmB,W;IAAA,C;G;EAPlB,8F;IAAA,4B;MACtB,sC;MAAA,YAAmB,kCAAM,U;MV+JrC,wBU/JuB,IV+JvB,EAAS,KAAT,C;MU7JY,IAAI,iBAAJ,C;QACI,oBV4JhB,aU5J2B,SV4J3B,EU5JwC,MV4JxC,C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+BAAA,W;;;;;;;;;;;;;;;;;;;;;;;;;;Y8BgFqC,gB;4BAAA,kK;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAA,kF;;;;;;;;;;;;;;;;;;;;;;;;;;;;Y3B2d9D,aAAkB,a;YAIlB,OAAO,M;;;;;;;;;;;;;;;;EACR,C;oDANA,6C;mBAAA,kE;QAAA,S;aAAA,Q;;aAAA,uB;EAMA,C;uDAEA,gB;IAAsB,oB;MAAA,OAAkB,2BAAO,iBAAP,KAAH,Q;IU9mB3B,Q;IV+mB0C,gBU/mB1C,CAAK,OV+mBd,QU/mBc,eV+mBkB,iBU/mBlB,CAAL,yD;IAAA,U;IVinBP,CUjnBO,CAAK,ST2EZ,SS3EY,eVgnBU,eUhnBV,CAAL,6DVinBP,oB;ICtiBA,SDwiBD,iBAAgB,G;EAElB,C;+CAEA,Y;IUvnBU,Q;IVynBR,CUznBQ,CAAK,OVwnBd,QUxnBc,eVwnBkB,iBUxnBlB,CAAL,yDVynBR,kBAAgB,G;EAElB,C;4CAEA,iB;IACC,UAAsB,OAAZ,sBAAY,kBAAe,KAAf,C;IACtB,sBAAkB,WAAI,GAAJ,C;IAClB,OAAO,G;EACR,C;0DAEA,gB;IUnoBU,Q;IVuoBT,kBUvoBS,CAAK,OVuoBI,QUvoBJ,eVuoBoC,eUvoBpC,CAAL,yD;IVwoBT,gBAAgB,WAAY,U;IAC5B,IAAK,E;IUzoBI,U;IV0oBT,qBU1oBS,CAAK,SV0oBO,QU1oBP,eV0oBuC,eU1oBvC,CAAL,6D;IV2oBT,2BAA2B,S;EAC5B,C;;;;;;E2CjpBD,oB;IACI,qBAAqB,oB;IACrB,cAAe,Q;EACnB,C;ECYA,kB;IAAA,sB;IACC,qBAA4B,S;IAC5B,qC;IACA,oBAAiC,I;IACjC,mBAA0B,K;IAC1B,qBAA4B,K;IAC5B,mBAA0B,K;IAC1B,qBAA4B,K;IAC5B,gBAAwB,K;IACxB,uBAAa,KAAK,mBAAL,C;IACb,4BAAkB,KAAK,wBAAL,C;G;;SARlB,Y;;;MAAA,wB;K;SAAA,c;MAAA,sB;K;;;SAOA,Y;a5BiB2F,0B;K;;;S4BhB3F,Y;a5BgB2F,+B;K;;E4BVf,yD;IAAC,W;EAAA,C;EAEvE,2D;IACH,4BAAE,8BAAF,C;IACD,W;EAAA,C;EALmC,kD;IACnC,uBAAU,8DAAV,UAA0E,oCAA1E,C;IAEA,uBAAI,sCAAJ,C;IAGD,W;EAAA,C;EAO4E,gE;IAAC,W;EAAA,C;EAEvE,kE;IACH,4BAAE,iBAAF,C;IACD,W;EAAA,C;EALmC,2D;IACnC,uBAAU,8DAAV,UAA0E,2CAA1E,C;IAEA,uBAAI,6CAAJ,C;IAGD,W;EAAA,C;EAII,uD;IACC,cAAa,kB;G;;;;;EAbP,sD;IAAA,qB;MACX,Q;MAAA,wE;MACA,2BAAe,wBAAW,mBAAU,sCAAV,C;MAQ1B,cAAG,MACD,IAAK,6DADJ,C;MAOJ,W;IAAA,C;G;EAsBmB,yD;IACd,cAAa,M;G;;;;;EAMX,kE;IACH,4BAAE,sCAAF,C;IACD,W;EAAA,C;EAHmC,2D;IACnC,uBAAI,6CAAJ,C;IAGD,W;EAAA,C;EAMK,kE;IACH,4BAAE,4DAAF,C;IACD,W;EAAA,C;EAHmC,2D;IACnC,uBAAI,6CAAJ,C;IAGD,W;EAAA,C;EAI2E,kE;IAAC,W;EAAA,C;EAEvE,kE;IACH,4BAAE,4BAAF,C;IACD,W;EAAA,C;EALmC,2D;IACnC,uBAAU,8DAAV,UAA0E,6CAA1E,C;IAEA,uBAAI,6CAAJ,C;IAGD,W;EAAA,C;EAhDa,sD;IAAA,qB;MACA,IAAG,IAAH,EAQO,MARP,EAwBb,MAxBa,EAiCb,MAjCa,EAwCb,MAxCa,EAqDb,MArDa,EAoFF,MApFE,EAkGQ,MAlGR,EAkGQ,MAlGR,EAoGE,MApGF,EAqGI,MArGJ,EAsGE,OAtGF,EAuGI,OAvGJ,EAiHD,OAjHC,EAiID,O;MAjIb,cAAc,QAAG,OAAH,EAAG,KAAH,kC;MAEd,2BAAM,OAAN,E;MAEA,WAAW,IAAK,OAAY,OAAZ,C;MAIhB,qBAAqB,eAAK,QAAL,8D;MAErB,IAAI,sBAAJ,C;QACC,4BAAgB,c;;MAKjB,IAAI,kCAAiB,MAAjB,CAAJ,C;QACC,2BAAM,wBAAN,E;QACA,cAAG,MACD,IAAK,+DADJ,C;;YAKG,IAAI,kCAAiB,cAAjB,CAAJ,C;QACN,4E;QACA,2BAAe,wBAAW,mBAAU,sCAAV,C;QAM1B,MAAO,SAAS,SAAQ,sSAAR,C;;YACV,IAAI,kCAAiB,QAAjB,CAAJ,C;QACN,4E;QACA,2BAAe,wBAAW,mBAAU,sCAAV,C;;YAKpB,IAAI,kCAAiB,qBAAjB,CAAJ,C;QACN,4E;QACA,2BAAe,wBAAW,mBAAU,sCAAV,C;;YAOpB,IAAI,kCAAiB,SAAjB,CAAJ,C;QlCvGC,W;QkCwGP,ClCxGO,CAAK,UkCwGZ,QlCxGY,ekCwGiB,wBlCxGjB,CAAL,+DkCwGP,cAAmE,wC;;YAC7D,IAAI,kCAAiB,UAAjB,CAAJ,C;QlCzGC,W;QkC0GP,ClC1GO,CAAK,UkC0GZ,QlC1GY,ekC0GiB,wBlC1GjB,CAAL,+DkC0GP,cAAmE,sD;;YAC7D,IAAI,kCAAiB,SAAjB,CAAJ,C;QACN,4E;QlC5GO,W;QkC6GP,2BlC7GO,CAAK,UkC6GN,QlC7GM,ekC6GwB,OlC7GxB,CAAL,+DkC6GP,E;QlC7GO,W;QkC+GP,IAAI,ClC/GG,CAAK,UkC+GR,QlC/GQ,ekC+GsB,OlC/GtB,CAAL,+DkC+GH,SAAJ,C;UACC,wB;QlChHM,W;QkCkHwC,SlClHxC,CAAK,UkCkHZ,QlClHY,ekCkHiB,gBlClHjB,CAAL,+DkCkHwC,GAAS,SAAT,E;QlClHxC,W;QkCoH+C,YlCpH/C,CAAK,UkCoHZ,QlCpHY,ekCoHiB,uBlCpHjB,CAAL,+DkCoH+C,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCpH/C,W;QkCqHmD,YlCrHnD,CAAK,UkCqHZ,QlCrHY,ekCqHiB,2BlCrHjB,CAAL,+DkCqHmD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCrHnD,W;QkCsHkD,YlCtHlD,CAAK,UkCsHZ,QlCtHY,ekCsHiB,0BlCtHjB,CAAL,+DkCsHkD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCtHlD,W;QkCuHsD,YlCvHtD,CAAK,UkCuHZ,QlCvHY,ekCuHiB,8BlCvHjB,CAAL,+DkCuHsD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCvHtD,W;QkCwHkD,YlCxHlD,CAAK,UkCwHZ,QlCxHY,ekCwHiB,0BlCxHjB,CAAL,+DkCwHkD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCxHlD,W;QkCyHsD,YlCzHtD,CAAK,UkCyHZ,QlCzHY,ekCyHiB,8BlCzHjB,CAAL,+DkCyHsD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCzHtD,W;QkC0HiD,YlC1HjD,CAAK,UkC0HZ,QlC1HY,ekC0HiB,yBlC1HjB,CAAL,+DkC0HiD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC1HjD,W;QkC2HqD,YlC3HrD,CAAK,UkC2HZ,QlC3HY,ekC2HiB,6BlC3HjB,CAAL,+DkC2HqD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC3HrD,W;QkC4HgD,YlC5HhD,CAAK,UkC4HZ,QlC5HY,ekC4HiB,wBlC5HjB,CAAL,+DkC4HgD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC5HhD,W;QkC6HoD,YlC7HpD,CAAK,UkC6HZ,QlC7HY,ekC6HiB,4BlC7HjB,CAAL,+DkC6HoD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC7HpD,W;QkC8HwD,YlC9HxD,CAAK,UkC8HZ,QlC9HY,ekC8HiB,gClC9HjB,CAAL,+DkC8HwD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC9HxD,W;QkC+H4D,YlC/H5D,CAAK,UkC+HZ,QlC/HY,ekC+HiB,oClC/HjB,CAAL,+DkC+H4D,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlC/H5D,W;QkCgIoD,YlChIpD,CAAK,UkCgIZ,QlChIY,ekCgIiB,4BlChIjB,CAAL,+DkCgIoD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlChIpD,W;QkCiIwD,YlCjIxD,CAAK,UkCiIZ,QlCjIY,ekCiIiB,gClCjIjB,CAAL,+DkCiIwD,GAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAhC,E;QlCjIxD,W;QkCoIP,ClCpIO,CAAK,UkCoIZ,QlCpIY,ekCoIiB,wBlCpIjB,CAAL,+DkCoIP,cAAmE,c;QAEnE,eAAe,KAAK,UAAL,C;QACf,mBAAmB,KAAK,cAAL,C;QACnB,2BAA2B,KAAK,sBAAL,C;QlCxIpB,W;QkCyIP,ClCzIO,CAAK,UkCyIZ,QlCzIY,ekCyIiB,sBlCzIjB,CAAL,+DkCyIP,cAA8E,SAAb,YAAa,C;QlCzIvE,W;QkC0IP,ClC1IO,CAAK,UkC0IZ,QlC1IY,ekC0IiB,sBlC1IjB,CAAL,+DkC0IP,cAAsF,SAArB,oBAAqB,C;QACtF,WAAW,4BAAK,aAAL,gC;QlC3IJ,W;QkC4IP,iCAAa,IAAb,ElC5IO,CAAK,UkC4IO,QlC5IP,ekC4IoC,YlC5IpC,CAAL,+DkC4IP,C;QlC5IO,W;QkC8IgD,ClC9IhD,CAAK,UkC8IZ,QlC9IY,ekC8IiB,wBlC9IjB,CAAL,+DkC8IgD,OAAvD,mBAA+E,wC;QlC9IxE,W;QkCgJP,ClChJO,CAAK,UkCgJZ,QlChJY,ekCgJiB,2BlChJjB,CAAL,+DkCgJP,cAAsE,a;QlChJ/D,W;QkCiJP,ClCjJO,CAAK,UkCiJZ,QlCjJY,ekCiJiB,0BlCjJjB,CAAL,+DkCiJP,cAAqE,K;QlCjJ9D,W;QkCkJP,ClClJO,CAAK,UkCkJZ,QlClJY,ekCkJiB,6BlClJjB,CAAL,+DkCkJP,cAAwE,K;QlClJjE,W;QkCmJP,ClCnJO,CAAK,UkCmJZ,QlCnJY,ekCmJiB,6BlCnJjB,CAAL,+DkCmJP,cAAwE,K;QlCnJjE,W;QkCoJP,ClCpJO,CAAK,UkCoJZ,QlCpJY,ekCoJiB,4BlCpJjB,CAAL,+DkCoJP,cAAuE,K;QlCpJhE,W;QkCqJP,ClCrJO,CAAK,UkCqJZ,QlCrJY,ekCqJiB,+BlCrJjB,CAAL,+DkCqJP,cAA0E,K;QlCrJnE,W;QkCsJP,ClCtJO,CAAK,UkCsJZ,QlCtJY,ekCsJiB,mClCtJjB,CAAL,+DkCsJP,cAA8E,K;QlCtJvE,W;QkCuJP,ClCvJO,CAAK,UkCuJZ,QlCvJY,ekCuJiB,2BlCvJjB,CAAL,+DkCuJP,cAAsE,K;QAEjD,uE;QAArB,gD;;YACM,IAAI,kCAAiB,kBAAjB,CAAJ,C;QACN,0BAAe,sBAAK,SAAL,qC;QACf,4BAAiB,sBAAK,eAAL,qC;QACjB,0BAAe,uBAAK,SAAL,sC;QACf,4BAAiB,uBAAK,eAAL,sC;;YACX,IAAI,kCAAiB,kBAAjB,CAAJ,C;QACN,mBAAmB,KAAK,cAAL,C;QAEnB,IAAI,qBAAgB,KAAhB,CAAJ,C;UlClKO,W;UkCmKN,ClCnKM,CAAK,UkCmKX,QlCnKW,ekCmKkB,wBlCnKlB,CAAL,+DkCmKN,cAAmE,W;;QAEpE,IAAI,qBAAgB,SAAhB,CAAJ,C;UlCrKO,W;UkCsKN,ClCtKM,CAAK,UkCsKX,QlCtKW,ekCsKkB,wBlCtKlB,CAAL,+DkCsKN,cAAmE,0B;UAEnE,aAAW,6BAAK,cAAL,iC;UlCxKL,W;UkCyKN,iCAAa,MAAb,ElCzKM,CAAK,UkCyKQ,QlCzKR,ekCyKqC,gBlCzKrC,CAAL,+DkCyKN,C;UAEA,oBAAoB,KAAK,eAAL,C;UACpB,OAAQ,KAAI,aAAJ,C;UlC5KF,W;UkC8KsE,SlC9KtE,CAAK,UkC8KX,QlC9KW,ekC8KkB,8BAAqB,aAArB,IAAqC,QlC9KvD,CAAL,+DkC8KsE,GAAS,eAAT,E;UlC9KtE,W;UkC+KkE,SlC/KlE,CAAK,UkC+KX,QlC/KW,ekC+KkB,0BAAiB,aAAjB,IAAiC,QlC/KnD,CAAL,+DkC+KkE,GAAS,eAAT,E;UAExE,sBAAW,O;UlCjLL,W;UkCmLyC,YlCnLzC,CAAK,UkCmLX,QlCnLW,ekCmLkB,gBlCnLlB,CAAL,+DkCmLyC,GAAY,SAAZ,E;;QAEhD,IAAI,qBAAgB,UAAhB,CAAJ,C;UlCrLO,W;UkCsLN,ClCtLM,CAAK,UkCsLX,QlCtLW,ekCsLkB,wBlCtLlB,CAAL,+DkCsLN,cAAmE,4B;UAEnE,aAAW,6BAAK,cAAL,iC;UlCxLL,W;UkCyLN,iCAAa,MAAb,ElCzLM,CAAK,UkCyLQ,QlCzLR,ekCyLqC,gBlCzLrC,CAAL,+DkCyLN,C;UAEA,sBAAoB,KAAK,eAAL,C;UACpB,OAAQ,KAAI,eAAJ,C;UlC5LF,W;UkC8LsE,SlC9LtE,CAAK,UkC8LX,QlC9LW,ekC8LkB,8BAAqB,eAArB,IAAqC,QlC9LvD,CAAL,+DkC8LsE,GAAS,aAAT,E;UlC9LtE,W;UkC+LkE,SlC/LlE,CAAK,UkC+LX,QlC/LW,ekC+LkB,0BAAiB,eAAjB,IAAiC,QlC/LnD,CAAL,+DkC+LkE,GAAS,aAAT,E;UAExE,iBAAM,O;UlCjMA,W;UkCmMyC,YlCnMzC,CAAK,UkCmMX,QlCnMW,ekCmMkB,gBlCnMlB,CAAL,+DkCmMyC,GAAY,SAAZ,E;;;MAGlD,W;IAAA,C;G;EAEa,6C;IACZ,MAAO,OAAM,uBAAN,C;IACR,W;EAAA,C;qCApLD,Y;IAEC,Q;IAAA,iE;IACA,oBAAe,wBAAW,mBAAU,6BAAV,C;IAQ1B,UAAK,cAAU,WAAY,MAAO,SAAS,SAA5B,GAAuC,KAAjD,C;IAEL,iBAAY,qC;IAmBZ,oBAAe,qC;IAkJf,kBAAa,+B;EAGd,C;0CAEA,yB;IAGuD,UACA,MADA,EAEG,MAFH,EAGG,MAHH,EAIE,MAJF,EAKK,MALL,EAMS,MANT,EAOC,M;IlCvN9C,U;IkC8M8B,ClC9M9B,CAAK,SkC8Md,OlC9Mc,ekC8Mc,SlC9Md,CAAL,6DkC8M8B,OAAvC,mBAA+D,mBAAQ,KAAK,UAAL,CAAR,Q;IlC9MtD,U;IkCgNT,ClChNS,CAAK,SkCgNd,OlChNc,ekCgNc,YlChNd,CAAL,6DkCgNT,cAAsD,oBAAK,MAAL,mC;IlChN7C,U;IkCiNT,ClCjNS,CAAK,SkCiNd,OlCjNc,ekCiNc,WlCjNd,CAAL,6DkCiNT,cAA0E,CAApB,sBAAK,KAAL,qCAAoB,Y;IlCjNjE,W;IkCkNT,ClClNS,CAAK,UkCkNd,OlClNc,ekCkNc,clClNd,CAAL,+DkCkNT,cAAgF,CAAvB,sBAAK,QAAL,qCAAuB,Y;IlClNvE,W;IkCmNT,ClCnNS,CAAK,UkCmNd,OlCnNc,ekCmNc,clCnNd,CAAL,+DkCmNT,cAAgF,CAAvB,sBAAK,QAAL,qCAAuB,Y;IlCnNvE,W;IkCoNT,ClCpNS,CAAK,UkCoNd,OlCpNc,ekCoNc,alCpNd,CAAL,+DkCoNT,cAA8E,CAAtB,sBAAK,OAAL,qCAAsB,Y;IlCpNrE,W;IkCqNT,ClCrNS,CAAK,UkCqNd,OlCrNc,ekCqNc,gBlCrNd,CAAL,+DkCqNT,cAAoF,CAAzB,sBAAK,UAAL,qCAAyB,Y;IlCrN3E,W;IkCsNT,ClCtNS,CAAK,UkCsNd,OlCtNc,ekCsNc,oBlCtNd,CAAL,+DkCsNT,cAA4F,CAA7B,sBAAK,cAA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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;kEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;sBAImC,I;;;;;;;;;;EAIhB,mM;;IASjB,kC;MAAA,qBACkC,I;IARlC,wB;IACA,kC;IACA,0D;IACA,sD;IACA,gD;IACA,8C;IACA,0C;IACA,4C;G;EAVF,gD;;G;8DAAA,Y;;G;;;;;;;;;;;;;EAAA,kD;;;;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;uEAAA,yB;;;;;;;;;wCAWoC,I;;;G;yEAXpC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;sEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAWoC,I;;;;;;;;;;EAIzB,qO;;IAKT,2B;MAAA,cAA0C,I;IAH1C,gB;IACA,sB;IACA,4B;IACA,8B;IACA,oC;IACA,8C;IACA,kC;IACA,oD;IACA,oD;IACA,kD;IACA,sC;IACA,kB;IACA,gC;G;EAfF,wC;;G;sDAAA,Y;;G;;;;;;;;;;;;;EAAA,0C;;;;;;;;;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;+DAAA,yB;;;;;iCAM4C,I;;;;;;;;;;;;G;iEAN5C,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;8DAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAM4C,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAa5B,4F;;IAKd,4B;MAAA,eACuC,I;IALvC,Y;IACA,gB;IACA,kC;IACA,4C;IACA,gC;G;EANF,6C;;G;2DAAA,Y;;G;;;;;;;;;;;;;EAAA,+C;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;oEAAA,yB;;;;;;kCAOyC,I;;;G;sEAPzC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;mEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAOyC,I;;;;;;;;;;EAIxB,wE;;IAGf,oB;MAAA,OAAkC,I;IAElC,wB;MAAA,WAAqC,I;IAJrC,Y;IACA,kB;IACA,gB;IACA,0B;IACA,wB;G;EANF,8C;;G;4DAAA,Y;;G;;;;;;;;;;;;;EAAA,gD;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;qEAAA,yB;;;;0BAIoC,I;;;8BAEG,I;;;G;uEANvC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;oEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;mBAIoC,I;;;;;;;;uBAEG,I;;;;;;;;;;EAInB,mE;;IAClB,8B;IACA,sC;G;EAHF,iD;;G;+DAAA,Y;;G;;;;;;;;;;;;;EAAA,mD;;;;;G;;SAAA,Y;MAAA,gC;K;;wEAAA,yB;;;;;G;0EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;uEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOiB,qD;;IACf,sB;IACA,wB;G;EAHF,8C;;G;4DAAA,Y;;G;;;;;;;;;;;;;EAAA,gD;;;;;G;;SAAA,Y;MAAA,gC;K;;qEAAA,yB;;;;;G;uEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;oEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOmB,kI;;IACjB,gC;IACA,0B;IACA,gC;IACA,kC;IACA,0C;IACA,8C;G;EAPF,gD;;G;8DAAA,Y;;G;;;;;;;;;;;;;EAAA,kD;;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;uEAAA,yB;;;;;;;;;G;yEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;sEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAWkB,sF;;IAEhB,yB;MAAA,YAAmC,I;IADnC,gB;IACA,0B;IACA,sD;IACA,sB;G;EALF,+C;;G;6DAAA,Y;;G;;;;;;;;;;;;;EAAA,iD;;;;;;;G;;SAAA,Y;MAAA,gC;K;;sEAAA,yB;;;+BAGqC,I;;;;;G;wEAHrC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;qEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;wBAGqC,I;;;;;;;;;;;;;;;;;;EAMf,kE;;IACpB,4C;IACA,kB;G;EAHF,mD;;G;iEAAA,Y;;G;;;;;;;;;;;;;EAAA,qD;;;;;G;;SAAA,Y;MAAA,gC;K;;0EAAA,yB;;;;;G;4EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;yEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOwB,qD;;IACtB,gB;IACA,gB;G;EAHF,qD;;G;mEAAA,Y;;G;;;;;;;;;;;;;EAAA,uD;;;;;G;;SAAA,Y;MAAA,gC;K;;4EAAA,yB;;;;;G;8EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;2EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAO2B,kF;;IACzB,0B;IACA,wC;IACA,sB;G;EAJF,wD;;G;sEAAA,Y;;G;;;;;;;;;;;;;EAAA,0D;;;;;;G;;SAAA,Y;MAAA,gC;K;;+EAAA,yB;;;;;;G;iFAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;8EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQ2B,8F;;IAIzB,0B;MAAA,aAAoC,I;IAHpC,0B;IACA,wC;IACA,sB;IACA,4B;G;EALF,wD;;G;sEAAA,Y;;G;;;;;;;;;;;;;EAAA,0D;;;;;;;G;;SAAA,Y;MAAA,gC;K;;+EAAA,yB;;;;;gCAKsC,I;;;G;iFALtC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;8EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAKsC,I;;;;;;;;;;EAIZ,yF;;IAIxB,0B;MAAA,aAAoC,I;IAHpC,0B;IACA,gC;IACA,sB;IACA,4B;G;EALF,uD;;G;qEAAA,Y;;G;;;;;;;;;;;;;EAAA,yD;;;;;;;G;;SAAA,Y;MAAA,gC;K;;8EAAA,yB;;;;;gCAKsC,I;;;G;gFALtC,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;6EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAKsC,I;;;;;;;;;;EAIlB,kE;;IAClB,0B;IACA,sB;IACA,sB;G;EAJF,iD;;G;+DAAA,Y;;G;;;;;;;;;;;;;EAAA,mD;;;;;;G;;SAAA,Y;MAAA,gC;K;;wEAAA,yB;;;;;;G;0EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;uEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAQoB,yF;;IAClB,kC;IACA,0B;IACA,wB;IACA,kB;IACA,sB;G;EANF,iD;;G;+DAAA,Y;;G;;;;;;;;;;;;;EAAA,mD;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;wEAAA,yB;;;;;;;;G;0EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;uEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAUoB,wE;;IAClB,Y;IACA,0B;IACA,sB;IACA,0B;G;EALF,iD;;G;+DAAA,Y;;G;;;;;;;;;;;;;EAAA,mD;;;;;;;G;;SAAA,Y;MAAA,gC;K;;wEAAA,yB;;;;;;;G;0EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;uEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EASqB,gE;;IAGnB,kB;MAAA,KAA4B,I;IAF5B,oC;IACA,gB;IACA,Y;G;EAJF,kD;;G;gEAAA,Y;;G;;;;;;;;;;;;;EAAA,oD;;;;;;G;;SAAA,Y;MAAA,gC;K;;yEAAA,yB;;;;wBAI8B,I;;;G;2EAJ9B,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;wEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;iBAI8B,I;;;;;;;;;;EAIpB,kF;;IACR,Y;IACA,gB;IACA,wB;IACA,8B;IACA,0B;IACA,0B;G;yCAED,Y;IACC,IAAI,kBAAY,SAAhB,C;MACC,OAAO,I;IAER,UAAU,iBAAa,EAAb,GAAoB,G;IAC9B,YAAY,iBAAa,CAAb,GAAmB,G;IAC/B,WAAW,gBAAa,G;IAExB,OAAO,cAAU,GAAV,EAAe,KAAf,EAAsB,IAAtB,C;EACR,C;EAlBD,uC;;G;qDAAA,Y;;G;;;;;;;;;;;;;EAAA,yC;;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;8DAAA,yB;;;;;;;;;G;gEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;6DAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsBiB,4C;;IACf,Y;IACA,gB;G;EAHF,8C;;G;4DAAA,Y;;G;;;;;;;;;;;;;EAAA,gD;;;;;G;;SAAA,Y;MAAA,gC;K;;qEAAA,yB;;;;;G;uEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;oEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOwB,yD;;IACtB,kB;IACA,sB;G;EAHF,qD;;G;mEAAA,Y;;G;;;;;;;;;;;;;EAAA,uD;;;;;G;;SAAA,Y;MAAA,gC;K;;4EAAA,yB;;;;;G;8EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;2EAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOsB,6D;;IACpB,Y;IACA,4B;IACA,gB;G;EAJF,mD;;G;iEAAA,Y;;G;;;;;;;;;;;;;EAAA,qD;;;;;;G;;SAAA,Y;MAAA,gC;K;;0EAAA,yB;;;;;;G;4EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;yEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA5LD,oC;IAAA,mC;MAAA,kB;;IAAA,4B;G;ECIA,iB;IAAA,qB;G;EAWmD,gE;IAC3B,4BAAE,6CAAF,C;IACJ,W;EAAA,C;EAKiD,uE;IACzC,kBAAQ,K;IACZ,W;EAAA,C;EAKM,yE;IACE,4BAAC,iEAAD,C;IACJ,W;EAAA,C;EACE,yE;IACE,4BAAC,0GAAD,C;IACJ,W;EAAA,C;EAfJ,4E;IAAA,4B;MACA,qBAAQ,qBAAR,C;MAEA,uBAAU,iCAAV,UAA6C,kDAA7C,C;MAIA,IAAI,2BAAJ,C;QACI,mBAAY,CAAO,SAAP,C;;;QAEZ,qBAAE,oDAAF,C;QAGA,qBAAE,oDAAF,C;;MAIR,W;IAAA,C;G;EAtBgB,mE;IAAA,4B;MAChB,eAAc,eAAd,EAA+B,2CAA/B,C;MAIA,uBAAI,kEAAJ,C;MAkBJ,W;IAAA,C;G;EAG6H,kD;IACjI,MAAO,MAAQ,eAAH,WAAL,EAAyB,QAAzB,C;IACX,W;EAAA,C;EAEqJ,+D;IAAA,mB;MACjJ,aAAM,Q;MACV,W;IAAA,C;G;oDAzCJ,uB;IAA4B,2B;MAAA,cAAmC,I;IAC3D,YAAY,gBACJ,oBACiB,IADjB,0BAEmB,CAAQ,wBAAR,CAFnB,CADI,C;IAOZ,KAAM,YACkB,MAAP,WAAT,QAAS,CAAO,UAAI,iDAAJ,CADlB,C;IA2BN,KAAM,cAAa,2CAAb,EAAwD,qEAAxD,EAA+H,sCAA/H,C;IAIN,KAAM,cAAa,sCAAb,EAAsD,uFAAtD,EAA+I,6CAA/I,C;IAIN,KAAM,O;EACV,C;;;;;;;EA7CJ,6B;IAAA,4B;MAAA,W;;IAAA,qB;G;EvFGA,wD;IAAsG,4C;G;EAAtG,+CACI,gB;IAAwC,+BAAW,CAAX,EAAc,CAAd,C;G;EAD5C,oF;EDiFA,yBAOe,yB;IArEf,mE;WAqEe,4B;MAAA,uB;QAAU,eAAsB,gB;QAAtB,OA5Dd,cAAc,SA4DgB,CA5DhB,CAAd,EAA2B,SA4DM,CA5DN,CAA3B,C;O;K;GA4DI,C;ECxFf,wD;IAAsG,4C;G;EAAtG,+CACI,gB;IAAwC,+BAAW,CAAX,EAAc,CAAd,C;G;EAD5C,oF;EDiFA,yBAOe,yB;IArEf,mE;WAqEe,4B;MAAA,uB;QAAU,eAAsB,gB;QAAtB,OA5Dd,cAAc,SA4DgB,CA5DhB,CAAd,EAA2B,SA4DM,CA5DN,CAA3B,C;O;K;GA4DI,C;EyF1Ef,sB;IAAA,0B;G;EAWyB,0D;IAAC,W;EAAA,C;EAFmD,2D;IACvE,IAAI,UAAU,IAAd,C;MACC,aAAE,cAAF,EAAkB,qCAAlB,C;;;MAEA,4BAAC,8DAAD,C;;IAEF,W;EAAA,C;EAUoB,4D;IAAC,W;EAAA,C;EAF2D,6D;IAC/E,IAAI,UAAU,IAAd,C;MACC,aAAE,cAAF,EAAkB,uCAAlB,C;;;MAEA,4BAAC,gBAAD,C;;IAEF,W;EAAA,C;EAC2E,6D;IAC1E,IAAI,UAAU,KAAd,C;MACC,4BAAC,GAAD,C;;;MAEA,4BAAC,GAAD,C;;IAEF,W;EAAA,C;EAO6E,6D;IAE3E,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;;MACX,4BAAC,MAAD,C;IAEV,W;EAAA,C;EAC+E,6D;IAE7E,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,KAAV,C;MAAmB,4BAAC,OAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,OAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;;MACX,4BAAC,MAAD,C;IAEV,W;EAAA,C;EACuE,6D;IAErE,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,MAAD,C;SACpB,cAAU,KAAV,C;MAAmB,4BAAC,OAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,OAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;;MACX,4BAAC,MAAD,C;IAEV,W;EAAA,C;EAoB4B,4D;IAAC,W;EAAA,C;EAN8E,6D;IAEzG,cAAU,MAAV,C;MAAoB,4BAAC,MAAD,C;SACpB,cAAU,MAAV,C;MAAoB,4BAAC,OAAD,C;SACpB,cAAU,KAAV,C;MAAmB,4BAAC,MAAD,C;SACnB,cAAU,KAAV,C;MAAmB,4BAAC,OAAD,C;;MACX,aAAE,cAAF,EAAkB,uCAAlB,C;IAEV,W;EAAA,C;EAgBK,iE;IAAE,4BAAC,EAAD,C;IAAI,W;EAAA,C;EAEF,4D;IAAE,OAAA,EAAG,gB;EAAgB,C;EAElB,4D;IAAE,cAAM,KAAN,IAAe,OAAM,KAArB,IAA8B,OAAM,M;EAAO,C;EAC3C,4D;IAAE,S;EAAG,C;EACX,yE;IAAA,4B;MACsB,UAAN,M;MAAM,iB;MACvB,mB;QAAS,qB;WACT,mB;QAAS,sB;WACT,oB;QAAU,kC;;QACF,c;MAJT,wB;MAOA,IAAI,eAAM,KAAV,C;QACC,qBAAQ,gDAAR,C;;MAGD,4BAAI,WAAF,iBAAmC,QAAd,UAAG,WAAW,EAAQ,GAAR,EAAa,GAAb,CAAnC,GAAuD,GAAzD,C;MACD,W;IAAA,C;G;EApBD,wF;IAAA,4B;MACF,8BAAG,4CAAH,C;MAK4B,kBAAT,O1E+Xf,a0EhYD,OADA,WADA,IADK,WAAR,eAAQ,CACL,EAAI,8CAAJ,CACA,CACA,EAAO,8CAAP,C1EgYC,iCf9aI,mByF+CI,8CzF/CJ,Ce8aJ,E0E/Xe,C;M9Fk6CN,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;Q8Fl6CuB,iD;QACjC,8BAAG,oD9Fi6CoB,O8Fj6CpB,CAAH,C;QAcA,sBAAa,W9Fm5CU,O8Fn5CV,C;;MAEjB,W;IAAA,C;G;EAIK,wE;IAAA,4B;MACF,sC;MAAA,YAAsB,mB;M7F6B3B,wB6F7BgB,O7F6BhB,EAAS,KAAT,C;M6F5BK,4BAAC,cAAO,KAAR,C;MACD,W;IAAA,C;G;EAEI,wF;IAAA,4B;MACF,IAAI,mBAAU,KAAd,C;QACC,qBAAQ,8BAAR,C;;MAED,cAAO,SAAS,CAAO,SAAP,EAAa,cAAb,C;MACjB,W;IAAA,C;G;EAXC,uF;IAAA,4B;MAKa,Q;MAJf,sBAAG,8DAAH,C;MAIe,sC;MAAf,OAAe,cAAf,C;QAAe,wB;QACd,sBAAG,sEAAH,C;;MAOF,W;IAAA,C;G;EAIG,mE;IACF,4BAAE,EAAF,C;IACD,W;EAAA,C;EAY+B,sF;IAAC,W;EAAA,C;EAHmC,+E;IAG/D,aAAY,aAAZ,EAA2B,iEAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EANa,0E;IACb,eAAc,gDAAd,EAAgE,0DAAhE,C;IAMD,W;EAAA,C;EAK4B,iF;IAAC,W;EAAA,C;EAHmC,0E;IAC/D,kBAAK,qBAAL,C;IAEA,aAAY,aAAZ,EAA2B,4DAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EAhBC,2F;IAAA,4B;MACF,IAAI,oBAAJ,C;QACC,aAAS,WAAT,kBAAc,qDAAd,C;;;QASA,eAAc,gDAAd,EAAgE,qDAAhE,C;;MAOF,W;IAAA,C;G;EAS+B,wF;IAAC,W;EAAA,C;EAJmC,iF;IAE/D,qBAAQ,mBAAR,C;IAEA,aAAY,aAAZ,EAA2B,mEAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EAPa,0E;IACb,eAAc,gDAAd,EAAgE,4DAAhE,C;IAOD,W;EAAA,C;EAO4B,iF;IAAC,W;EAAA,C;EAJmC,0E;IAC/D,kBAAK,qBAAL,C;IACA,qBAAQ,mBAAR,C;IAEA,aAAY,aAAZ,EAA2B,4DAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EApBC,2F;IAAA,4B;MACF,IAAI,oBAAJ,C;QACC,qBAAQ,8BAAR,C;QACA,aAAS,WAAT,kBAAc,qDAAd,C;;;QAUA,qBAAQ,8BAAR,C;QACA,eAAc,gDAAd,EAAgE,qDAAhE,C;;MAQF,W;IAAA,C;G;EAO+B,wF;IAAC,W;EAAA,C;EAHmC,iF;IAG/D,aAAY,aAAZ,EAA2B,mEAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EANa,0E;IACb,eAAc,gDAAd,EAAgE,4DAAhE,C;IAMD,W;EAAA,C;EAK4B,iF;IAAC,W;EAAA,C;EAHmC,0E;IAC/D,kBAAK,qBAAL,C;IAEA,aAAY,aAAZ,EAA2B,4DAA3B,C;IACA,4BAAC,gBAAD,C;IACD,W;EAAA,C;EAhBC,2F;IAAA,4B;MACF,IAAI,oBAAJ,C;QACC,aAAS,WAAT,kBAAc,qDAAd,C;;;QASA,eAAc,gDAAd,EAAgE,qDAAhE,C;;MAOF,W;IAAA,C;G;EArEE,4D;IACF,sBAAG,8CAAH,C;IAIA,kBAAkB,QAAS,gBAAe,sBAAf,C;IAC3B,mBAAmB,mB;IACnB,UAAU,+CAA0B,MAA1B,Q;IAEV,sBAAG,iEAAH,C;IAmBA,sBAAG,iEAAH,C;IAuBA,sBAAG,iEAAH,C;IAmBD,W;EAAA,C;EApHsC,2D;IAAA,4B;MA6BvB,Q;MA5Bf,qBAAQ,iBAAR,C;MAEA,mBhGpDkD,gB;MgGqDlD,wBAAG,sEAAH,C;MAyBuB,kBAAR,e;M9FoiBV,kBAAY,gB;MAsBH,U;MAAA,+B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QAAM,IAAI,CAAW,O8F1jBG,oB9F0jBlB,C;UAAyB,WAAY,WAAI,OAAJ,C;;MAjEpD,oBAAS,gB;MAyEA,U;MAAA,SAPT,WAOS,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QAAM,I8FlkBiD,Q9FkkBnC,S8FlkBsC,KAAH,EAAW,WAAX,C9FkkBjD,C;UAAwB,aAAY,WAAI,SAAJ,C;;M8FlkBzC,O9FmkBV,a8FnkBU,W;MAAf,OAAe,cAAf,C;QAAe,wB;QACd,wBAAG,6DAAH,C;;MAgBD,wBAAG,uCAAH,C;MAuED,W;IAAA,C;G;EAUK,mE;IAAE,4BAAC,EAAD,C;IAAI,W;EAAA,C;EACN,oE;IAAE,4BAAC,sBAAD,C;IAAkB,W;EAAA,C;EACgC,6D;IAAE,S;EAAG,C;EACxD,2E;IAAA,4B;MAAE,4BAAE,OAAqB,QAAd,UAAG,WAAW,EAAQ,GAAR,EAAa,GAAb,CAArB,GAAyC,GAA3C,C;MAAgD,W;IAAA,C;G;EAJpD,wF;IAAA,4B;MACF,8BAAG,8CAAH,C;MACA,8BAAG,+CAAH,C;MACQ,kBAAR,e;M9FqhCI,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,Q;MAAA,6B;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,WAAY,WAAc,I8F3lCV,gB9F2lCJ,C;;M8F3lCiD,kB9F2oB1D,W8F3oB+B,S9F4lC/B,W8F5lC+B,C9F2oB/B,iCKjzBI,mByFsK+C,+CzFtK/C,CLizBJ,E;MAgqBS,U;MAAA,+B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;Q8F3yCyD,iD;QACrE,8BAAG,sD9F0yCsB,O8F1yCtB,CAAH,C;QACA,sBAAa,W9FyyCY,O8FzyCZ,C;;MAEf,W;IAAA,C;G;EAIK,yE;IAAA,4B;MACF,sC;MAAA,YAAsB,mB;M7F7E3B,wB6F6EgB,O7F7EhB,EAAS,KAAT,C;M6F8EK,4BAAC,cAAO,KAAR,C;MACD,W;IAAA,C;G;EAEI,yF;IAAA,4B;MACF,cAAO,SAAS,CAAO,SAAP,EAAa,cAAb,C;MACjB,W;IAAA,C;G;EARC,uF;IAAA,4B;MAKa,Q;MAJf,sBAAG,+DAAH,C;MAIe,sC;MAAf,OAAe,cAAf,C;QAAe,wB;QACd,sBAAG,uEAAH,C;;MAIF,W;IAAA,C;G;EAxBqC,2D;IAAA,4B;MAavB,Q;MAZf,qBAAQ,iBAAR,C;MAEA,mBAAmB,eAAsB,GAAtB,E;MACnB,wBAAG,sEAAH,C;MASuB,kBAAR,e;M9F+YV,kBAAS,gB;MAyEA,U;MAAA,+B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QAAM,I8FxdY,Q9FwdE,O8FxdC,KAAH,EAAW,WAAX,C9FwdZ,C;UAAwB,WAAY,WAAI,OAAJ,C;;M8FxdzC,O9FydV,W8FzdU,W;MAAf,OAAe,cAAf,C;QAAe,wB;QACd,wBAAG,6DAAH,C;;MAYF,W;IAAA,C;G;EAG6E,2D;IAAA,qB;MAC9E,wCAAgB,KAAhB,C;MACD,W;IAAA,C;G;EAC+E,2D;IAAA,qB;MAC9E,wCAAgB,KAAhB,C;MACD,W;IAAA,C;G;EAC+E,4D;IAAA,qB;MAC9E,wCAAgB,MAAhB,C;MACD,W;IAAA,C;G;EAiBoC,oE;IAC9B,4BAAE,kBAAF,C;IACD,W;EAAA,C;EAEE,oE;IACD,4BAAE,4EAAF,C;IACD,W;EAAA,C;EAGI,sE;IAAA,4B;MACF,4BAAE,SAAO,WAAI,GAAX,kCAAqB,WAAI,MAAzB,MAAF,C;MACD,W;IAAA,C;G;EACG,sE;IAAA,4B;MACF,4BAAE,sDAAuC,WAAI,MAAJ,GAAY,GAAnD,MAAF,C;MACD,W;IAAA,C;G;EAOU,wF;IACP,eAAc,a;IACd,aAAY,WAAI,M;IAChB,aAAY,WAAI,G;G;;;;;EAKE,oI;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kC;EAKnB,C;;;;;;;;4FALmB,Y;;;;;YAIK,Q;YAHI,gB;4BAAZ,mCAAY,cAAQ,aAAH,uBAAL,EAAqC,IAAK,WAAU,oBAAV,CAA1C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA3B,eAA2B,a;YAE3B,cAAc,IAAK,OAAY,QAAS,KAArB,C;YAFnB,OAGA,MAAO,SAAP,QAAuB,uBAAQ,aAAR,mCAHvB,M;;;;;;;;;;;;;;;;EAID,C;EALmB,mF;IAAA,yD;qBAAA,wH;UAAA,S;eAAA,Q;;eAAA,uB;IAKnB,C;G;EAdiB,4E;IAAA,qB;MACjB,0F;MAMA,QAAQ,IAAK,WAAU,CAAV,CAAb,C;MAEY,OAAZ,sBAAY,kBAAO,+DAAP,C;MAMb,W;IAAA,C;G;EAnB+D,sE;IAAA,4B;MAC/D,qBAAQ,iCAAR,C;MACA,4BAAE,yBAAF,C;MAEA,+BAAkB,kEAAlB,C;MAgBD,W;IAAA,C;G;EArCkB,uE;IAAA,4B;MASP,Q;MARZ,eAAc,eAAd,EAA+B,+CAA/B,C;MAIA,qBAAE,+CAAF,C;MAIY,sC;MAAZ,OAAY,cAAZ,C;QAAY,qB;QACX,wBAAG,oDAAH,C;QAGA,sBAAG,oDAAH,C;QAIA,eAAc,gDAAd,EAAgE,oDAAhE,C;;MAsBF,W;IAAA,C;G;EAGuJ,iF;IAAA,mB;MACxJ,aAAM,Q;MACN,wCAAgB,KAAhB,C;MACD,W;IAAA,C;G;EAEqJ,gE;IAAA,mB;MACpJ,aAAM,Q;MACP,W;IAAA,C;G;EA/DuE,4D;IAAA,qB;MACxC,Q;MAAhC,uBAAuB,eAAS,OAAT,QAAS,gBAAe,oBAAf,CAAT,kC;MAEsC,gBAAV,0B;MAAnD,mB3FjQ4E,wBAAqC,SAAvB,aAAR,iBAAQ,sCAAuB,CAArC,E2FiQqB,gB3FjQrB,C;M2FmQ5E,IhGjIwD,CgGiIpD,YhGjIqD,UgGiIzD,C;QACC,YAAY,gBACV,oBACW,IADX,0BAEa,CAAQ,wBAAR,CAFb,CADU,C;QAOZ,KAAM,YACY,MAAP,WAAT,QAAS,CAAO,UAAI,qDAAJ,CADZ,C;QA2CN,KAAM,cAAa,4DAAb,EAA4E,qEAA5E,EAAmJ,+DAAnJ,C;QAKN,KAAM,cAAa,sCAAb,EAAsD,uFAAtD,EAA+I,8CAA/I,C;QAIN,KAAM,O;;;QAEN,wCAAgB,KAAhB,C;;MAEF,W;IAAA,C;G;EAjV6C,kD;IAAA,qB;MACjC,IAAK,IAAL,EACU,MADV,EAiQF,MAjQE,EAiQX,MAjQW,EAoQF,MApQE,EAoQX,MApQW,EAuQF,MAvQE,EAuQX,MAvQW,EA2QF,MA3QE,EA2QX,M;MA3QD,YAAY,cAAK,OAAL,IAAK,wBAAe,iBAAf,CAAL,qC;MACZ,iBAAiB,cAAK,SAAL,IAAK,wBAAe,gBAAf,CAAL,uC;MAEjB,cAAc,UACZ,8BAAe,gCAAf,EAAiD,IAAjD,EAAuD,IAAvD,EAAwE,8BAAxE,CADY,EAQZ,8BAAe,qCAAf,EAA6C,IAA7C,EAAmD,IAAnD,CARY,EASZ,8BAAe,wCAAf,EAAyD,IAAzD,EAA+D,IAA/D,CATY,EAUZ,8BAAe,8BAAf,EAA+C,IAA/C,EAAqD,IAArD,CAVY,EAaZ,8BAAe,yCAAf,EAA0D,IAA1D,EAAgE,IAAhE,CAbY,EAeZ,8BAAe,uCAAf,EAAwD,KAAxD,EAA+D,IAA/D,EAAgF,gCAAhF,CAfY,EAsBZ,8BAAe,oCAAf,EAAkD,KAAlD,EAAyD,KAAzD,EAA2E,gCAA3E,CAtBY,EA6BZ,8BAAe,iDAAf,EAAkE,KAAlE,EAAyE,KAAzE,CA7BY,EA+BZ,8BAAe,gEAAf,EAA8E,KAA9E,EAAqF,KAArF,CA/BY,EAgCZ,8BAAe,+BAAf,EAAgD,KAAhD,EAAuD,KAAvD,CAhCY,EAiCZ,8BAAe,4BAAf,EAA0C,KAA1C,EAAiD,KAAjD,CAjCY,EAkCZ,8BAAe,kFAAf,EAA6F,KAA7F,EAAoG,IAApG,CAlCY,EAmCZ,8BAAe,sCAAf,EAAoD,KAApD,EAA2D,KAA3D,EAA6E,gCAA7E,CAnCY,EA+CZ,8BAAe,2CAAf,EAAsD,KAAtD,EAA6D,KAA7D,EAA+E,gCAA/E,CA/CY,EA2DZ,8BAAe,4BAAf,EAA6C,MAA7C,EAAqD,KAArD,EAAuE,gCAAvE,CA3DY,EAgFZ,8BAAe,yFAAf,EAA8F,KAA9F,EAAqG,IAArG,CAhFY,EAiFZ,8BAAe,mDAAf,EAAoE,KAApE,EAA2E,IAA3E,CAjFY,EAkFZ,8BAAe,uFAAf,EAA+F,KAA/F,EAAsG,KAAtG,CAlFY,EAoFZ,8BAAe,iEAAf,EAAkF,KAAlF,EAAyF,KAAzF,EAA2G,gCAA3G,CApFY,EA8FZ,8BAAe,yCAAf,EAA0D,KAA1D,EAAiE,IAAjE,CA9FY,EA+FZ,8BAAe,mDAAf,EAAoE,KAApE,EAA2E,IAA3E,CA/FY,EAgGZ,8BAAe,WAAf,EAA4B,MAA5B,EAAoC,KAApC,CAhGY,EAiGZ,8BAAe,WAAf,EAA4B,MAA5B,EAAoC,KAApC,CAjGY,EAkGZ,8BAAe,WAAf,EAA4B,MAA5B,EAAoC,KAApC,CAlGY,E;MAsGH,cAAX,UAAW,EACwB,QAAjB,WAAhB,oBAAgB,EAAW,IAAX,CAAiB,UAAM,yCAAN,CADxB,C;MA0HL,cAAN,KAAM,EAC6B,QAAjB,WAAhB,oBAAgB,EAAW,IAAX,CAAiB,UAAM,yCAAN,CAD7B,C;MA8BN,CAAC,UAAS,SAAT,QAAS,gBAAe,qBAAf,CAAT,wEAAD,8BAA+E,iDAA/E,Q;MAGA,CAAC,UAAS,SAAT,QAAS,gBAAe,qBAAf,CAAT,wEAAD,8BAA+E,iDAA/E,Q;MAGA,CAAC,UAAS,SAAT,QAAS,gBAAe,qBAAf,CAAT,wEAAD,8BAA+E,kDAA/E,Q;MAIA,CAAC,UAAS,SAAT,QAAS,gBAAe,eAAf,CAAT,wEAAD,8BAAyE,kDAAzE,Q;MAsED,W;IAAA,C;G;+BApVD,Y;IAEC,QAAS,kBAAiB,kBAAjB,EAAqC,6BAArC,C;EAmVV,C;EAYmC,6D;IAC9B,4BAAE,yBAAO,oCAAP,KAAF,C;IACD,W;EAAA,C;EAGK,oE;IACH,gBAAM,4F;IACP,W;EAAA,C;EACE,sE;IACD,4BAAE,8GAAF,C;IACD,W;EAAA,C;EACE,sE;IACD,4BAAE,0GAAF,C;IACD,W;EAAA,C;EACE,sE;IACD,4BAAE,iDAAF,C;IACD,W;EAAA,C;EAEoD,+E;IAAA,4B;MACnD,gBAAM,G;MACN,gBAAM,M;MACN,kBAAQ,kBAAW,W;MACnB,iBAAO,M;MACR,W;IAAA,C;G;EAIE,sE;IACD,4BAAE,2NAAF,C;IACD,W;EAAA,C;EAQW,uF;IACP,eAAc,a;IACD,Q;IAAb,aAA2F,CAA9E,qBAAA,kBAAa,wBAAuB,gBAAvB,CpDonIkC,CoDpnIO,CpDonIP,CoDpnI/C,uCAA8E,O;G;;;;;EAKzE,8I;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kC;EAKnB,C;;;;;;;;sGALmB,Y;;;;;YAIK,Q;YAHI,gB;4BAAZ,mCAAY,cAAQ,aAAH,uBAAL,EAAqC,IAAK,WAAU,oBAAV,CAA1C,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA3B,eAA2B,a;YAE3B,cAAc,IAAK,OAAY,QAAS,KAArB,C;YAFnB,OAGA,MAAO,SAAP,QAAuB,uBAAQ,aAAR,mCAHvB,M;;;;;;;;;;;;;;;;EAID,C;EALmB,2F;IAAA,yD;qBAAA,kI;UAAA,S;eAAA,Q;;eAAA,uB;IAKnB,C;G;EAbiB,2E;IACjB,yF;IAKA,QAAQ,IAAK,WAAU,CAAV,CAAb,C;IAEY,OAAZ,sBAAY,kBAAO,uEAAP,C;IAMb,W;EAAA,C;EAlB+D,2E;IAC/D,qBAAQ,iCAAR,C;IACA,4BAAE,sEAAF,C;IAEA,+BAAkB,6DAAlB,C;IAeD,W;EAAA,C;EApBG,sE;IACH,eAAc,gDAAd,EAAgE,sDAAhE,C;IAoBD,W;EAAA,C;EAIM,6E;IACJ,4BAAE,qBAAF,C;IACD,W;EAAA,C;EAJC,sE;IACD,4BAAE,6CAAF,C;IACA,wBAAK,wDAAL,C;IAGA,4BAAE,8BAAF,C;IACD,W;EAAA,C;EAzDG,wE;IAAA,4B;MACH,qBAAQ,qBAAR,C;MACA,uCAAI,+CAAJ,C;MAGA,qBAAE,iDAAF,C;MAGA,qBAAE,iDAAF,C;MAGA,qBAAE,iDAAF,C;MAIA,6DAAkC,gBAAlC,EAAoD,qEAApD,C;MAOA,4BAAE,QAAF,C;MAEA,qBAAE,iDAAF,C;MAIA,uBAAI,iDAAJ,C;MAuBA,qBAAE,iDAAF,C;MAaD,W;IAAA,C;G;EApEmB,+D;IAAA,4B;MACnB,eAAc,eAAd,EAA+B,wCAA/B,C;MAGA,uBAAI,8DAAJ,C;MAiED,W;IAAA,C;G;EAGmJ,4D;IAAA,mB;MACpJ,aAAM,Q;MACP,W;IAAA,C;G;iDAnFD,sB;IACC,YAAY,gBACV,oBACW,IADX,0BAEa,CAAQ,wBAAR,CAFb,CADU,C;IAOZ,KAAM,YACY,MAAP,WAAT,QAAS,CAAO,UAAI,6CAAJ,CADZ,C;IAyEN,KAAM,cAAa,sCAAb,EAAsD,uFAAtD,EAA+I,0CAA/I,C;IAIN,KAAM,O;EACP,C;EAEyB,yF;IAAkF,wB;MAAA,WAAoC,iE;IAArH,gB;IAAkB,sC;IAA6B,8C;IAAkC,wB;G;EAEvF,4E;IAAC,W;EAAA,C;EAED,8E;IAAC,W;EAAA,C;EAJ0H,mF;IAAA,oC;MAC9I,IAAI,UAAU,uBAAd,C;QACC,aAAE,cAAF,EAAkB,uDAAlB,C;;;QAEA,aAAE,cAAF,EAAkB,yDAAlB,C;;MAEF,W;IAAA,C;G;;;;;;mDANA,Y;IAA0B,gB;G;mDAA1B,Y;IAA4C,2B;G;mDAA5C,Y;IAAyE,+B;G;mDAAzE,Y;IAA2G,oB;G;qDAA3G,gE;IAAA,qCAA0B,kCAA1B,EAA4C,mEAA5C,EAAyE,+EAAzE,EAA2G,8CAA3G,C;G;iDAAA,Y;IAAA,OAA0B,mDAA1B,IAA4C,4DAA5C,KAAyE,oEAAzE,KAA2G,8CAA3G,O;G;iDAAA,Y;IAAA,c;IAA0B,qD;IAAkB,gE;IAA6B,oE;IAAkC,yD;IAA3G,a;G;+CAAA,iB;IAAA,4IAA0B,oCAA1B,IAA4C,0DAA5C,IAAyE,kEAAzE,IAA2G,4CAA3G,I;G;;;;;;;EAjbD,kC;IAAA,iC;MAAA,gB;;IAAA,0B;G;ExFdA,wD;IAAsG,4C;G;EAAtG,+CACI,gB;IAAwC,+BAAW,CAAX,EAAc,CAAd,C;G;EAD5C,oF;EDiFA,yBAOe,yB;IArEf,mE;WAqEe,4B;MAAA,uB;QAAU,eAAsB,gB;QAAtB,OA5Dd,cAAc,SA4DgB,CA5DhB,CAAd,EAA2B,SA4DM,CA5DN,CAA3B,C;O;K;GA4DI,C;E0FrFf,2B;IAAA,+B;G;EAIsD,4D;IAAA,qB;MACb,UACA,M;MAD7B,oBAAoB,eAAS,OAAT,QAAS,gBAAe,mBAAf,CAAT,kC;MACpB,oBAAoB,eAAS,SAAT,QAAS,gBAAe,cAAf,CAAT,oC;MAEa,gBAAf,gBAAK,U;MAAvB,kB5FqBoE,wBAAqC,SAAvB,aAAR,iBAAQ,2CAAuB,CAArC,E4FrBV,a5FqBU,C;M4FpBvC,kBAAf,gBAAK,U;MAAnB,c5FkBsD,0BAAc,aAAR,mBAAQ,qCAAd,E4FlBV,a5FkBU,C;M4FhBtD,6CAAgB,OAAhB,EAAyB,WAAzB,C;MACJ,W;IAAA,C;G;oCAVJ,Y;IAEI,QAAS,kBAAiB,kBAAjB,EAAqC,kCAArC,C;EASb,C;EASiC,kE;IAAE,OAAI,EAAG,MAAH,KAAY,CAAC,GAAjB,GAAsB,SAAtB,GAAqC,EAAG,M;EAAM,C;EAKc,8F;IACnE,qBAAQ,cAAR,C;IACJ,W;EAAA,C;EACG,yG;IAAA,4B;MACmB,IAAjB,I;MAAA,QAAM,kBAAW,aAAjB,C;aACG,yB;UAA6B,kB;UAA7B,K;aACA,uB;UAA2B,gB;UAA3B,K;aACA,mB;UAAuB,Y;UAAvB,K;aACA,qB;UAAyB,c;UAAzB,K;aACA,yB;UAA6B,wB;UAA7B,K;aACA,sB;UAA0B,e;UAA1B,K;aACA,uB;UAA2B,sB;UAA3B,K;aACA,yB;UAA6B,yB;UAA7B,K;aACA,0B;UAA8B,4B;UAA9B,K;aACA,2B;UAA+B,6B;UAA/B,K;aACA,2B;UAA+B,0B;UAA/B,K;aACA,yB;UAA6B,0B;UAA7B,K;aACA,0B;UAA8B,2B;UAA9B,K;aACA,uB;UAA2B,iC;UAA3B,K;aACA,6B;UAAiC,iC;UAAjC,K;gBACQ,Y;UAhBX,K;;MAAD,iC;MAkBJ,W;IAAA,C;G;EACG,yG;IAAA,4B;MACC,IAAI,kBAAW,MAAX,KAAoB,CAAC,GAAzB,C;QACI,4BAAC,eAAU,kBAAW,MAArB,YAAD,C;;MAER,W;IAAA,C;G;EAUkH,qH;IAAA,qB;MAC9F,GAAG,SAAH,IAAgB,S;MAChB,GAAG,aAAH,IAAoB,kBAAW,a;MACnC,W;IAAA,C;G;EAAc,0I;IAAA,qB;MACH,Q;MAAA,OAAH,EAAG,W;MAAP,IAAqB,GAAjB,oBAAsB,GAA1B,C;;QACoB,4B;QAAwB,gBAAf,gBAAK,U;QAAU,cAAU,EAAG,K;QAArD,uC5FxC4B,wBAAqC,SAAvB,aAAR,iBAAQ,2CAAuB,CAArC,EAA2C,OAA3C,C4FwC5B,C;;MAER,W;IAAA,C;G;EARc,qJ;IAAA,qB;MACqC,UAAnD,M;MAAA,gC;MAAmD,OAAG,eAAH,6B;MAAzC,2BAAY,gBAAZ,EAAwF,2GAAxF,UAGI,gIAHJ,O;MAQd,W;IAAA,C;G;EAhBoC,gJ;IAAA,4B;MACxC,qBAAQ,iCAAR,C;MAEA,IAAI,kBAAW,cAAX,IAA4B,kBAAW,MAAX,GAAmB,eAAQ,MAA3D,C;QACI,oDAAW,yBAAX,E;;;QAEA,oDAAW,qBAAX,E;QACA,+BAAkB,2IAAlB,C;;MAYJ,4BAAC,SAAD,C;MACJ,W;IAAA,C;G;EAS0G,uH;IAAA,qB;MAC9F,GAAG,wBAAH,IAA+B,kBAAW,a;MAC9C,W;IAAA,C;G;EAAc,0I;IAAA,qB;MACH,Q;MAAA,OAAH,EAAG,W;MAAP,IAAqB,GAAjB,oBAAsB,GAA1B,C;;QACoB,4B;QAAwB,gBAAf,gBAAK,U;QAAU,cAAU,EAAG,K;QAArD,uC5F5DgC,wBAAqC,SAAvB,aAAR,iBAAQ,2CAAuB,CAArC,EAA2C,OAA3C,C4F4DhC,C;;MAER,W;IAAA,C;G;EAPc,uJ;IAAA,qB;MACqC,UAAnD,M;MAAA,gC;MAAmD,OAAG,eAAH,6B;MAAzC,2BAAY,gBAAZ,EAAwF,6GAAxF,UAEI,gIAFJ,O;MAOd,W;IAAA,C;G;EAdoC,gJ;IAAA,4B;MACxC,IAAI,CAAC,kBAAW,cAAZ,IAA6B,kBAAW,UAA5C,C;QACI,oDAAW,yBAAX,E;;;QAEA,oDAAW,qBAAX,E;QAEA,+BAAkB,6IAAlB,C;;MAWJ,qBAAQ,iCAAR,C;MACA,4BAAC,QAAD,C;MACJ,W;IAAA,C;G;EAxEA,uI;IAAA,4B;MACA,qBAAQ,qBAAR,C;MACA,uBAAa,eAAH,4BAAiC,kBAAW,UAA5C,SAAV,UAAuE,yEAAvE,C;MAGA,wBAAG,+FAAH,C;MAoBA,sBAAG,+FAAH,C;MAKA,IAAI,kBAAW,MAAX,KAAoB,CAAC,GAAzB,C;QACI,eAAc,4BAAd,EAA4C,sIAA5C,C;;MAsBJ,eAAc,4BAAd,EAA4C,sIAA5C,C;MAoBJ,W;IAAA,C;G;EA1EoC,gI;IAAA,4B;MACpC,uBAAI,6HAAJ,C;MA0EJ,W;IAAA,C;G;EA9E4C,mH;IAAA,4B;MACuB,kB/Fg3B5E,W+Fh3BK,mB/Fg3BL,iCKjzBI,mB0F/DsB,oD1F+DtB,CLizBJ,E;MAgqBS,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;Q+FhhD2E,uC;QAAA,iD;QAC3E,Q/F+gDa,O+F/gDM,aAAX,GAA0B,KAA1B,Y/F+gDK,O+F/gDwC,UAA7C,CAAR,C;QACA,eAAc,wBAAd,EAAwC,4D/F8gD3B,O+F9gD2B,4CAAxC,C;;MA6ER,W;IAAA,C;G;EAjFM,4G;IAAA,4B;MACN,iBAAc,oCAAd,EAAoD,yGAApD,C;MAiFJ,W;IAAA,C;G;sDAvFJ,gC;IACI,SAAS,IAAK,wBAAe,qBAAf,C;IAEX,MAAH,EAAG,C;IAEA,OAAH,EAAG,EAAO,kEAAP,C;EAmFP,C;EAGa,4C;;IACL,Y;IACA,kB;G;EAHR,6C;;G;2DAAA,Y;;G;;;;;;;;;;;;;EAAA,+C;;;;;G;;SAAA,Y;MAAA,gC;K;;oEAAA,yB;;;;;G;sEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;mEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOmB,iG;;IACX,gC;IACA,0B;IACA,kB;IACA,kC;IACA,0B;G;EANR,mD;;G;iEAAA,Y;;G;;;;;;;;;;;;;EAAA,qD;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;0EAAA,yB;;;;;;;;G;4EAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;yEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA/GJ,uC;IAAA,sC;MAAA,qB;;IAAA,+B;G;ECAA,0B;IAAA,8B;G;EAoBqB,sI;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4C;IAAA,wC;EAoBnB,C;;;;;;;;yEApBmB,Y;;;;;YAeuC,UACN,M;YAfxB,gB;4BAAZ,mCAAY,cAChB,eAAH,qBAAyB,yBAAzB,gBADmB,EAElB,IAAK,WAAU,uBAAV,CAFa,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAA3B,eAA2B,a;YAK3B,QAAQ,eAAe,QAAS,KAAhC,C;YACA,cAAc,IAAK,OAAY,QAAS,KAArB,C;YAEnB,IAAI,QAAS,WAAT,KAAuB,GAA3B,C;cACC,QAAQ,YAAR,C;cACA,iBAAiB,UAAS,eAAH,6BAAN,C;cACjB,UAAW,O;cACiC,SAA5C,IAAK,2BAAkB,mBAAlB,CAAuC,GAAS,yBAAT,E;cACA,YAA5C,IAAK,2BAAkB,mBAAlB,CAAuC,GAAY,qBAAZ,E;cAC5C,IAAK,2BAAkB,kBAAlB,CAAL,aAAiF,CAAzB,uBAAQ,OAAR,mCAAyB,Y;cAdlF,OAeC,IAAK,2BAAkB,aAAlB,CAAL,aAAkD,yBAAQ,MAAR,qCAfnD,M;;;cAAA,OAiBC,QAAQ,aAAR,CAjBD,M;;;;;;;;;;;;;;;;;;;;EAmBD,C;EApBmB,mF;IAAA,yD;qBAAA,0H;UAAA,S;eAAA,Q;;eAAA,uB;IAoBnB,C;G;+CAvCD,yB;IAUiB,IAAK,I;IARrB,QAAQ,yBAAsB,KAA9B,C;IACA,gBAAgB,oBAAgB,MAAO,SAAS,OAAhC,C;IAChB,cAAc,SAAU,KAAI,OAAJ,C;IACxB,gBAAgB,SAAU,KAAI,SAAJ,C;IAC1B,QAAQ,uBAAW,OAAX,CAAR,C;IACA,QAAQ,yBAAa,SAAb,CAAR,C;IAEA,aAAW,MACT,cAA+E,CAAjE,cAAK,OAAL,IAAK,wBAAe,mBAAf,CAAL,0CAAiE,OAA/E,CADS,EAET,YAAW,KAAX,CAFS,EAGT,cAAa,OAAb,CAHS,EAIT,gBAAe,SAAf,CAJS,E;IAOX,QAAQ,MAAK,WAAb,C;IACA,QAAQ,IAAK,WAAU,MAAV,CAAb,C;IAEY,OAAZ,sBAAY,kBAAO,uDAAP,C;EAqBb,C;;;;;;;EAzCD,sC;IAAA,qC;MAAA,oB;;IAAA,8B;G;ECEA,2B;IAAA,+B;G;EAoBoC,mE;IAAA,qB;MAChB,0B;MACJ,W;IAAA,C;G;EAQQ,+E;IAAA,4B;MACA,4BAAG,kBAAW,QAAX,GAAqB,KAArB,GAA6B,kBAAW,QAAxC,IAAkD,UAAQ,kBAAW,gBAAnB,MAAlD,CAAH,C;MACJ,W;IAAA,C;G;EAHM,wE;IAAA,4B;MACN,yBAAI,qEAAJ,C;MAGJ,W;IAAA,C;G;EA7BsC,4D;IAAA,qB;MACb,UAGA,MAHA,EAOR,M;MAPrB,oBAAoB,eAAS,OAAT,QAAS,gBAAe,mBAAf,CAAT,kC;MAEa,gBAAf,gBAAK,U;MAAvB,kB9FoBoE,wBAAqC,SAAvB,aAAR,iBAAQ,wCAAuB,CAArC,E8FpBb,a9FoBa,C;M8FnBpE,oBAAoB,eAAS,SAAT,QAAS,gBAAe,cAAf,CAAT,oC;MAES,kBAAf,gBAAK,U;MAAnB,c9FesD,0BAAc,aAAR,mBAAQ,qCAAd,E8FfM,a9FeN,C;M8FbtD,gBAAgB,cAAK,SAAL,IAAK,wBAAe,YAAf,CAAL,0C;MAChB,IAAI,OAAO,OAAQ,MAAnB,C;QACc,SAAV,SAAU,GAAS,yBAAT,E;;;QAEA,SAAV,SAAU,GAAS,wBAAT,E;;MAGd,IAAI,OAAQ,MAAR,GAAgB,IAApB,C;QACI,oBAAoB,yD;;MAKxB,SAAS,IAAK,wBAAe,qBAAf,C;MAEd,QAAQ,WAAY,KAApB,C;MjGygDQ,U;MAAA,SiGxgDR,WjGwgDQ,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QiGvgDD,WAAO,2CjGugDO,OiGvgDP,CAAP,C;;MAMX,W;IAAA,C;G;oCAjCJ,Y;IAEI,QAAS,kBAAiB,kBAAjB,EAAqC,kCAArC,C;EAgCb,C;EAImG,gD;IAEtE,IAAK,IAAL,EACoB,M;IAFzC,GAAG,SAAH,IAAgB,a;IAChB,GAAG,aAAH,IAA8E,CAAzD,cAAK,OAAL,IAAK,wBAAe,cAAf,CAAL,uCAAyD,O;IAC9E,GAAG,4BAAH,IAAyF,CAArD,cAAK,SAAL,IAAK,wBAAe,UAAf,CAAL,yCAAqD,O;IAC7F,W;EAAA,C;EAAc,kD;IACH,Q;IAAA,OAAH,EAAG,W;IAAP,IAAqB,GAAjB,oBAAwB,GAA5B,C;MACI,MAAO,SAAP,QAAuB,MAAO,SAAS,KAAhB,GAAuB,S;;IAItD,W;EAAA,C;kCAZJ,Y;IAEI,uBAAU,qBAAY,aAAZ,EAAqF,kCAArF,UAII,oCAJJ,EAAyC,eAAH,6BAAtC,C;EAWd,C;EAGgB,2F;;IACR,sB;IACA,sB;IACA,sB;IACA,sC;IACA,0B;G;EANR,gD;;G;8DAAA,Y;;G;;;;;;;;;;;;;EAAA,kD;;;;;;;;G;;SAAA,Y;MAAA,gC;K;;uEAAA,yB;;;;;;;;G;yEAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;sEAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EArDJ,uC;IAAA,sC;MAAA,qB;;IAAA,+B;G;ECRA,6B;IAAA,iC;G;EAE+B,yE;IAAA,mB;MAY5B,Q;MAXA,WAAW,cAAA,QAAS,KAAT,C;MvENH,U;MuEOR,yBvEPQ,CAAK,SuEOY,QvEPZ,euEOsC,uBvEPtC,CAAL,6D;MuESc,gBAAT,uC;M1EiqVI,U;MAAhB,4BAAgB,SAAhB,kB;QAAgB,cAAA,SAAhB,Q;Q0EhqVK,mB1EgqVwB,O0EhqVT,UAAf,E;;MAGD,SAAL,IAAK,GAAS,gBAAS,UAAlB,E;MAEL,0BAAa,sBAAa,WAAb,EAA0B,gBAAS,KAAnC,C;MAEb,U;MAAA,+B;QvEjBQ,U;QuEiBR,SvEjBQ,CAAK,SuEiBb,kBvEjBa,euEiB2B,GvEjB3B,CAAL,6D;;;QuEiBR,a;MAAA,6CAA2D,OAA3D,EAAoE,gBAAS,KAA7E,e;MAGA,IAAI,4EAAJ,C;QACC,0BAAa,sBAAa,WAAb,EAA0B,MAA1B,C;;QAEb,0BAAa,qBAAY,WAAZ,C;MACf,W;IAAA,C;G;EAGqB,2E;IAAA,qB;MACnB,gBAAS,E;MACV,W;IAAA,C;G;6DAzBF,mC;IACC,eAA6B,uD;IAqB7B,IAAI,aAAJ,C;MACU,WAAT,QAAS,EAAW,yDAAX,C;;MAIT,QAAS,E;EACX,C;EAEuB,wE;IAAvB,e;IAAwB,0B;IAAuB,gB;IAA/C,iB;IAAA,uB;G;EAAA,qD;IAAA,wD;K;IACC,mGAAQ,OAAR,EAAiB,aAAjB,C;IACA,yGAAW,MAAX,EAAmB,YAAnB,C;G;;EADA,8D;IAAA,2C;IAAA,sD;G;;EACA,iE;IAAA,2C;IAAA,yD;G;;;;;;EAFD,iD;IAAA,sH;G;;EAAA,sD;IAAA,a;MAAA,e;QAAA,2D;MAAA,kB;QAAA,8D;MAAA,QAAA,oG;;G;;;;;;;;EA/BD,yC;IAAA,wC;MAAA,uB;;IAAA,iC;G;ECLA,uB;IAAoB,4BAAiB,MAAjB,C;G;0CAChB,wB;IACI,mBAAK,qCAAL,E;EACJ,C;;;;;;ECF2B,gC;IAAC,gB;G;;;;;;ECHhC,qB;IAAA,yB;G;EAYiB,sD;IAAA,+B;MACd,WAAW,OAAO,KAAP,C;MACX,QAAQ,IAAK,MAAK,MAAL,CAAL,GAAoB,KAApB,GAA4B,IAAK,MAAK,IAAL,CAAjC,GAA8C,KAA9C,YAAsD,IAAK,MAA3D,CAAR,C;MACA,WAAW,IAAK,MAAK,MAAL,C;MAChB,QAAM,IAAN,C;aACC,U;UAAc,cAAO,CAAI,IAAK,MAAK,oBAAL,CAAT,IAAqC,IAAK,IAAK,UAAL,C;UAA/D,K;aACA,Q;UAAY,cAAO,CAAI,IAAK,MAAK,oBAAL,CAAT,IAA6D,eAAxB,IAAK,MAAQ,WAAW,C;UAAhF,K;gBACQ,cAAO,CAAI,IAAK,MAAK,oBAAL,CAAT,IAAqC,IAAK,M;UAH1D,K;;MAKD,W;IAAA,C;G;EAYc,+C;G;;;;;EAKI,0C;IACjB,QAAQ,OAAR,C;IACA,2BAAc,iB;IACd,2BAAc,eAAe,O;IAC9B,W;EAAA,C;EACgB,0C;IACf,QAAQ,QAAR,C;IACA,2BAAc,iB;IACd,2BAAc,eAAe,O;IAC9B,W;EAAA,C;oCA9CD,kD;IAC8B,sB;MAAA,SAAqC,I;IAAM,8B;MAAA,iBAA0B,I;IAAM,wB;MAAA,WAAsB,aAAH,sBAA0B,OAA1B,a;IAC3H,QAAQ,2BAAR,C;IAEA,aAAW,Q;IACX,aAAa,Q;IAEb,gBAAgB,GAAG,sBAAH,C;IAEhB,OAAK,MAAL,IAAe,I;IAEf,SAAU,MAAK,oCAAL,C;IAWV,IAAI,cAAJ,C;MACC,MAAO,CAAO,MAAP,C;IAER,OAAK,QAAL,IAAiB,M;IAEjB,IAAI,cAAJ,C;MACC,2BAAc,wBAAe,yBAAO,gBAAP,QAA2B,KAA1C,C;IAEf,QAAQ,gCAAR,C;IACA,QAAQ,cAAc,IAAK,WAAU,MAAV,CAA3B,C;IACA,cAAuB,yC;IACvB,cAAc,Q;IACd,eAAe,O;IACf,mBAAmB,M;IACnB,eAAe,IAAK,WAAU,MAAV,C;IACpB,kBAAkB,8B;IAKlB,gBAAgB,8B;IAMhB,MAAO,MACM,OADN,C;EAGR,C;;;;;;;EApDD,iC;IAAA,gC;MAAA,e;;IAAA,yB;G;ECDA,0B;IACC,iBAAyB,K;IACzB,aAAY,E;IACZ,sBAA4B,I;IAC5B,wBAAuB,E;G;EAEF,yD;IACnB,0B;IACA,kB;G;;;;;;;;;;;ECRqB,6D;IAAxB,e;IAAyB,kC;IAA2B,oB;IAApD,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IACC,iEACE,uCADF,EAEE,UACE,oCADF,EAEE,SAFF,EAGE,SAHF,EAIE,SAJF,EAKE,SALF,EAME,SANF,EAOE,SAPF,EAQE,SARF,EASE,SATF,EAUE,SAVF,EAFF,C;IAeA,yDACE,mCADF,EAEE,UACE,gCADF,EAEE,+BAFF,EAGE,+BAHF,EAIE,iCAJF,EAKE,gCALF,EAME,gCANF,EAOE,+BAPF,EAQE,iCARF,EASE,iCATF,EAUE,gCAVF,EAFF,C;IAeA,6DACE,qCADF,EAEE,UACE,kCADF,EAEE,iCAFF,EAGE,iCAHF,EAIE,mCAJF,EAKE,kCALF,EAME,kCANF,EAOE,iCAPF,EAQE,mCARF,EASE,mCATF,EAUE,kCAVF,EAFF,C;IAeA,iEACE,uCADF,EAEE,UACE,oCADF,EAEE,mCAFF,EAGE,mCAHF,EAIE,qCAJF,EAKE,oCALF,EAME,oCANF,EAOE,mCAPF,EAQE,qCARF,EASE,qCATF,EAUE,oCAVF,EAFF,C;IAeA,6DACE,qCADF,EAEE,UACE,kCADF,EAEE,iCAFF,EAGE,iCAHF,EAIE,mCAJF,EAKE,kCALF,EAME,kCANF,EAOE,iCAPF,EAQE,mCARF,EASE,mCATF,EAUE,kCAVF,EAFF,C;IAeA,+DACE,sCADF,EAEE,UACE,oCADF,EAEE,mCAFF,EAGE,mCAHF,EAIE,qCAJF,EAKE,oCALF,EAME,oCANF,EAOE,mCAPF,EAQE,qCARF,EASE,qCATF,EAUE,oCAVF,EAFF,C;IAeA,iEACE,uCADF,EAEE,UACE,iCADF,EAEE,gCAFF,EAGE,gCAHF,EAIE,kCAJF,EAKE,iCALF,EAME,iCANF,EAOE,gCAPF,EAQE,kCARF,EASE,kCATF,EAUE,iCAVF,EAFF,C;IAeA,6EACE,8CADF,EAEE,UACE,oCADF,EAEE,kCAFF,EAGE,mCAHF,EAIE,qCAJF,EAKE,mCALF,EAME,oCANF,EAOE,kCAPF,EAQE,qCARF,EASE,oCATF,EAUE,mCAVF,EAFF,C;G;;EAzGA,6C;IAAA,0B;IAAA,qC;G;;EAeA,yC;IAAA,0B;IAAA,iC;G;;EAeA,2C;IAAA,0B;IAAA,mC;G;;EAeA,6C;IAAA,0B;IAAA,qC;G;;EAeA,2C;IAAA,0B;IAAA,mC;G;;EAeA,4C;IAAA,0B;IAAA,oC;G;;EAeA,6C;IAAA,0B;IAAA,qC;G;;EAeA,mD;IAAA,0B;IAAA,2C;G;;;;;;EA1GD,gC;IAAA,4S;G;;EAAA,qC;IAAA,a;MAAA,e;QAAA,0C;MAAA,W;QAAA,sC;MAAA,a;QAAA,wC;MAAA,e;QAAA,0C;MAAA,a;QAAA,wC;MAAA,c;QAAA,yC;MAAA,e;QAAA,0C;MAAA,qB;QAAA,gD;MAAA,QAAA,2D;;G;;ECIA,wB;IAAA,4B;G;yDACC,iC;IAA4D,uB;MAAA,UAAe,C;IAC1E,OAAO,mCAAsB,KAAtB,EAA6B,uBAAU,KAAV,CAA7B,EAA+C,OAA/C,C;EACR,C;yDAEA,gC;IAA0D,uB;MAAA,UAAe,C;IAG3D,Q;IAFb,cAAc,E;IAED,gBAAA,KAAM,WAAN,C;IAAb,OAAa,cAAb,C;MAAa,iC;MACZ,YAAY,iBAAqB,MAAX,oBAAL,IAAK,CAAW,CAArB,C;MAEZ,WAAW,K;;IAGZ,mBAAmB,UAAU,KAAM,WAAW,OAA3B,I;IAEnB,IAAI,eAAe,CAAnB,C;MACC,aAAU,CAAV,MAAkB,YAAlB,M;QACC,UAAU,iBAAK,CAAL,IAAU,O;;;IAItB,OAAO,O;EACR,C;6DAEA,iC;IACC,OAAO,uCAA0B,KAA1B,EAAiC,uBAAU,KAAV,CAAjC,EAAmD,OAAnD,C;EACR,C;EA0B2B,yE;IACtB,kBAAQ,I;IACR,mBAAS,I;IACV,W;EAAA,C;EAoCsB,2E;IACtB,kBAAQ,I;IACR,mBAAS,I;IACV,W;EAAA,C;EAjEsC,qG;IAAA,4B;MAIpB,IA0BN,IA1BM,EA2CH,M;MA9ChB,mBAAmB,kBAAU,aAAM,WAAW,OAA3B,I;MAEnB,IAAI,eAAe,CAAnB,C;QACC,aAAU,CAAV,MAAkB,YAAlB,M;UACC,YAAY,yBAAK,CAAL,C;UACZ,e;UAEA,IAAU,WAAN,KAAM,EAAW,GAAX,CAAN,IAA+B,SAAN,KAAM,EAAS,GAAT,CAAnC,C;YAEC,cAAsC,SAAP,KAAX,MAAN,KAAM,GAAM,GAAN,EAAW,CAAO,EAAS,CAAT,C;YACtC,iBAAuB,WAAN,KAAM,EAAW,KAAX,C;YACvB,cAAc,uCAAoC,O;YAClD,eAAmB,UAAJ,GACd,UADc,GAGd,U;;;YAID,cAAc,8C;;UAGf,uBAAU,WAAV,UAAuB,oDAAvB,C;;;MAOW,gBAAA,aAAM,WAAN,C;MAAb,OAAa,cAAb,C;QAAa,iC;QACZ,YAAY,yBAAqB,MAAX,oBAAL,IAAK,CAAW,CAArB,C;QAEZ,iB;QAEA,IAAU,WAAN,KAAM,EAAW,GAAX,CAAN,IAA+B,SAAN,KAAM,EAAS,GAAT,CAAnC,C;UAEC,gBAAsC,SAAP,KAAX,MAAN,KAAM,GAAM,GAAN,EAAW,CAAO,EAAS,CAAT,C;UACtC,mBAAuB,WAAN,KAAM,EAAW,KAAX,C;UACvB,gBAAc,uCAAoC,S;UAClD,iBAAmB,YAAJ,GACd,UADc,GAGd,U;;;UAIa,QAAsB,MAAX,oBAAL,IAAK,CAAW,CAAtB,C;iBACb,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;iBACA,C;cAAK,uD;cAAL,K;oBACQ,MAAM,sBAAiB,mBAAjB,C;;UAXf,sB;;QAeD,uBAAU,aAAV,UAAuB,sDAAvB,C;;MAKF,W;IAAA,C;G;6DApED,gC;IACC,OAAoC,MAAb,WAAhB,oBAAgB,CAAa,UAAI,mEAAJ,C;EAoErC,C;6CAEA,iB;IACc,Q;IAAA,OAAN,KAAM,O;IAAN,iB;MAAgB,MAAM,mCAA8B,WAAS,KAAM,KAAf,0BAA9B,C;;IAA7B,OAAO,I;EACR,C;;;;;;;EAtGD,oC;IAAA,mC;MAAA,kB;;IAAA,4B;G;ECJA,yB;IACC,iBACyB,K;IACzB,mBAC2B,I;IAC3B,yBACiC,I;IACjC,oBAC4B,I;G;;;;;;ECRJ,oD;IACvB,kB;IACA,kB;IACA,sB;G;;;;;;ECHF,4B;IACC,2BAAmC,K;IACnC,uBAA+B,K;IAC/B,8BAAsC,I;IACtC,4BAAmC,oF;IACnC,yBAAwB,E;IACxB,qBAA2B,I;G;EAEV,mF;IACf,0B;IACA,wC;IACA,sC;G;;;;;;EAGS,yD;IACT,oB;IACA,gB;IACA,4B;G;;;;;;EAGF,0D;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,wD;IAAA,2D;K;IACC,gG;IACA,0G;IACA,kG;IACA,kG;G;;EAHA,6D;IAAA,8C;IAAA,qD;G;;EACA,kE;IAAA,8C;IAAA,0D;G;;EACA,8D;IAAA,8C;IAAA,sD;G;;EACA,8D;IAAA,8C;IAAA,sD;G;;;;;;EAJD,oD;IAAA,kO;G;;EAAA,yD;IAAA,a;MAAA,W;QAAA,0D;MAAA,gB;QAAA,+D;MAAA,Y;QAAA,2D;MAAA,Y;QAAA,2D;MAAA,QAAA,+E;;G;;;;;;;ECpBD,0B;IACC,iBAAyB,K;IACzB,kBAA0B,I;IAC1B,mBAA2B,I;IAC3B,mBAA0B,0C;IAC1B,oBAA2B,2C;IAC3B,mBAA2B,I;IAC3B,oBAA4B,I;IAC5B,qBAA6B,K;IAC7B,0BAAiC,oF;IACjC,iBAAyB,K;IACzB,kBAAyB,E;IACzB,kBAA0B,K;IAC1B,mBAA0B,E;IAC1B,+BAAoC,I;IACpC,gCAAqC,I;G;;;;;;ECbjB,wK;IACnB,gB;IACA,kB;IACA,sB;IACA,wB;IACA,8B;IACA,kB;IACA,kC;IACA,sB;IACA,wC;IACA,sD;IACA,oD;G;;;;;;ECbkB,oE;IAClB,0B;IACA,8B;IACA,0B;IACA,sB;G;;;;;;ECJS,yB;IACT,Y;IACA,gB;G;;;;;;ECKoB,mD;IAAC,sB;IAAqB,wB;IAAsB,gB;G;;;;;;ECLlE,4B;IACC,wC;IAYA,ehH6C6C,U;G;EgHzD7C,sC;IAAA,0C;G;wDACC,gB;IAEa,UACE,M;IAFd,UhHuG2D,oB;IgHtG/C,kBAAA,MAAa,MAAK,IAAL,CAAb,C;IAAZ,OAAY,cAAZ,C;MAAY,qB;MACX,GAAI,aAAI,GAAJ,EAAS,sBAAK,GAAL,qCAAT,C;;IAEL,QAAQ,WAAS,GAAI,QAAQ,KAA7B,C;IAC0B,gBAAnB,sB;I/FsEN,S+FrEA,c;IADD,O/FuEQ,S;E+FpET,C;;;;;;;EAVD,kD;IAAA,iD;MAAA,gC;;IAAA,0C;G;2CAcA,4B;IAEc,Q;IAAA,8BAAQ,GAAR,C;IAAA,iB;MAAgB,OAAO,G;;IAApC,aAAa,I;IAEb,8BAAqB,WAArB,iB;MAAA,UAAqB,WAArB,O;MACC,SAAgB,QAAP,MAAO,EAAQ,MAAG,KAAH,MAAR,EAAwB,SAAJ,GAAI,CAAxB,C;;IAEjB,OAAO,M;EACR,C;;;;;;ECzBmB,qC;IAClB,c;IACA,kB;IACA,gB;G;;;;;;mCAHF,Y;IACE,e;G;mCADF,Y;IAEE,iB;G;mCAFF,Y;IAGE,gB;G;qCAHF,4B;IAAA,qBACE,+BADF,EAEE,qCAFF,EAGE,kCAHF,C;G;iCAAA,Y;IAAA,OACE,4CADF,IAEE,wCAFF,KAGE,sCAHF,O;G;iCAAA,Y;IAAA,c;IACE,oD;IACA,sD;IACA,qD;IAHF,a;G;+BAAA,iB;IAAA,4IACE,kCADF,IAEE,sCAFF,IAGE,oCAHF,I;G;ECAyB,0C;IACvB,8B;G;;;;;;ECDF,0B;IAAA,8B;G;EACC,+C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,6C;IAAA,gD;K;IACC,gF;IACA,8F;IACA,kG;IACA,wF;IACA,0F;IACA,sF;IACA,8E;IACA,sF;IACA,0F;IACA,8E;IACA,iF;IACA,qF;IACA,qF;IACA,yF;IACA,iF;IACA,6E;IACA,2E;IACA,6E;IACA,yG;IACA,qF;IACA,qF;IACA,yF;IACA,mF;IACA,uF;IACA,mH;IACA,iH;IACA,yF;IACA,uG;IACA,iF;IACA,yG;IACA,qG;IACA,6E;IACA,yG;IACA,iG;IACA,uF;IACA,+E;IACA,6E;G;;EApCA,qD;IAAA,mC;IAAA,6C;G;;EACA,4D;IAAA,mC;IAAA,oD;G;;EACA,8D;IAAA,mC;IAAA,sD;G;;EACA,yD;IAAA,mC;IAAA,iD;G;;EACA,0D;IAAA,mC;IAAA,kD;G;;EACA,wD;IAAA,mC;IAAA,gD;G;;EACA,oD;IAAA,mC;IAAA,4C;G;;EACA,wD;IAAA,mC;IAAA,gD;G;;EACA,0D;IAAA,mC;IAAA,kD;G;;EACA,oD;IAAA,mC;IAAA,4C;G;;EACA,qD;IAAA,mC;IAAA,6C;G;;EACA,uD;IAAA,mC;IAAA,+C;G;;EACA,uD;IAAA,mC;IAAA,+C;G;;EACA,yD;IAAA,mC;IAAA,iD;G;;EACA,qD;IAAA,mC;IAAA,6C;G;;EACA,mD;IAAA,mC;IAAA,2C;G;;EACA,kD;IAAA,mC;IAAA,0C;G;;EACA,mD;IAAA,mC;IAAA,2C;G;;EACA,iE;IAAA,mC;IAAA,yD;G;;EACA,uD;IAAA,mC;IAAA,+C;G;;EACA,uD;IAAA,mC;IAAA,+C;G;;EACA,yD;IAAA,mC;IAAA,iD;G;;EACA,sD;IAAA,mC;IAAA,8C;G;;EACA,wD;IAAA,mC;IAAA,gD;G;;EACA,sE;IAAA,mC;IAAA,8D;G;;EACA,qE;IAAA,mC;IAAA,6D;G;;EACA,yD;IAAA,mC;IAAA,iD;G;;EACA,gE;IAAA,mC;IAAA,wD;G;;EACA,qD;IAAA,mC;IAAA,6C;G;;EACA,iE;IAAA,mC;IAAA,yD;G;;EACA,+D;IAAA,mC;IAAA,uD;G;;EACA,mD;IAAA,mC;IAAA,2C;G;;EACA,iE;IAAA,mC;IAAA,yD;G;;EACA,6D;IAAA,mC;IAAA,qD;G;;EACA,wD;IAAA,mC;IAAA,gD;G;;EACA,oD;IAAA,mC;IAAA,4C;G;;EACA,mD;IAAA,mC;IAAA,2C;G;;;;;;EArCD,yC;IAAA,2xD;G;;EAAA,8C;IAAA,a;MAAA,c;QAAA,kD;MAAA,qB;QAAA,yD;MAAA,uB;QAAA,2D;MAAA,kB;QAAA,sD;MAAA,mB;QAAA,uD;MAAA,iB;QAAA,qD;MAAA,a;QAAA,iD;MAAA,iB;QAAA,qD;MAAA,mB;QAAA,uD;MAAA,a;QAAA,iD;MAAA,c;QAAA,kD;MAAA,gB;QAAA,oD;MAAA,gB;QAAA,oD;MAAA,kB;QAAA,sD;MAAA,c;QAAA,kD;MAAA,Y;QAAA,gD;MAAA,W;QAAA,+C;MAAA,Y;QAAA,gD;MAAA,0B;QAAA,8D;MAAA,gB;QAAA,oD;MAAA,gB;QAAA,oD;MAAA,kB;QAAA,sD;MAAA,e;QAAA,mD;MAAA,iB;QAAA,qD;MAAA,+B;QAAA,mE;MAAA,8B;QAAA,kE;MAAA,kB;QAAA,sD;MAAA,yB;QAAA,6D;MAAA,c;QAAA,kD;MAAA,0B;QAAA,8D;MAAA,wB;QAAA,4D;MAAA,Y;QAAA,gD;MAAA,0B;QAAA,8D;MAAA,sB;QAAA,0D;MAAA,iB;QAAA,qD;MAAA,a;QAAA,iD;MAAA,Y;QAAA,gD;MAAA,QAAA,iE;;G;;EAwCA,gD;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,8C;IAAA,iD;K;G;;;;;;EAAA,0C;IAAA,S;G;;EAAA,+C;IAAA,kE;G;;EAIA,4C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,0C;IAAA,6C;K;IACC,4E;IACA,4E;IACA,0E;G;;EAFA,mD;IAAA,gC;IAAA,2C;G;;EACA,mD;IAAA,gC;IAAA,2C;G;;EACA,kD;IAAA,gC;IAAA,0C;G;;;;;;EAHD,sC;IAAA,uI;G;;EAAA,2C;IAAA,a;MAAA,e;QAAA,gD;MAAA,e;QAAA,gD;MAAA,c;QAAA,+C;MAAA,QAAA,8D;;G;;;;;;;;EA7CD,sC;IAAA,qC;MAAA,oB;;IAAA,8B;G;ECAoB,wC;IAClB,oB;IACA,oB;G;;;;;;ECFF,wB;IAAA,4B;IACC,eAAoB,C;IACpB,oBAAyB,C;IACzB,uDAA4D,C;IAC5D,qBAA0B,C;IAC1B,oBAAyB,C;IACzB,2BAAgC,C;IAChC,oBAAyB,C;IACzB,gCAAqC,C;IACrC,+BAAoC,C;IACpC,cAAmB,C;IACnB,oBAAyB,E;IACzB,iBAAsB,E;IACtB,0BAA+B,E;IAC/B,wBAA6B,E;IAC7B,0BAA+B,E;G;;;;;;;EAfhC,oC;IAAA,mC;MAAA,kB;;IAAA,4B;G;ECAY,iD;IACV,Y;IACA,gB;IACA,kC;IACA,oB;G;;;;;;ECJQ,qE;IACR,Y;IACA,gB;IACA,gC;IACA,0B;IACA,8B;IACA,kB;G;;;;;;ECFgB,iO;IAChB,kC;IACA,wC;IACA,oC;IACA,4C;IACA,wD;IACA,sC;IACA,gC;IACA,kB;IACA,oB;IACA,8B;IACA,wB;IACA,0B;IACA,8B;IACA,8B;G;;;;;;EAGe,+C;IACf,kB;IACA,oB;IACA,0B;G;;;;;;EAGF,sD;IACC,OAAO,kCAAqB,WAAY,GAAjC,C;EACR,C;EAEA,+C;IAC2B,Q;IAAA,kBAAnB,4B;IAAmB,sB;;MjGygCP,U;MAAhB,4BAAgB,WAAhB,kB;QAAgB,cAAA,WAAhB,Q;QAAsB,IiGzgCe,OjGygCD,OiGzgCI,GAAH,KjGygCf,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;IiG1gCV,OAAO,CAAmB,yBAAnB,mBAAkD,kC;EAC1D,C;EAEA,sD;IACC,OAAO,kCAAqB,WAAY,GAAjC,C;EACR,C;EAEA,+C;IAC2B,kBAAnB,4B;IAAmB,sB;;MjGigCP,Q;MAAhB,wBAAgB,WAAhB,gB;QAAgB,cAAA,WAAhB,M;QAAsB,IiGjgCe,OjGigCD,OiGjgCI,GAAH,KjGigCf,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;IiGlgCV,OAAO,0B;EACR,C;ECzCuB,yC;IAAC,gB;IAAkB,oB;G;;;;;;ECAzB,+C;IACf,Y;IACA,gB;IACA,sB;IACA,kB;G;;;;;;ECFF,6B;IACC,UAAkB,I;IAClB,qBACoB,K;IACpB,2BACgD,I;G;;;;;;ECP9B,iH;IACjB,sB;MAAA,SAAuB,I;IACvB,4B;MAAA,eAA6B,I;IAC7B,4B;MAAA,eAAkC,E;IAClC,0B;MAAA,aAA0B,I;IAC1B,wB;MAAA,WAA8B,E;IAC9B,sB;MAAA,SAA4B,I;IAC5B,uB;MAAA,UAA6B,I;IAC7B,2B;MAAA,cAAoC,I;IAPpC,oB;IACA,gC;IACA,gC;IACA,4B;IACA,wB;IACA,oB;IACA,sB;IACA,8B;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;S1FMF,iB;;K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SlBuBA,iB;;K;;;;;;;;;;;SAEA,iB;;K;;;;;;SACA,iB;;K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SoDlCA,iB;;K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBlCQmC,I;oBlBuBb,G;chBiCsC,oB;wBgB/BlC,K;kBACN,K;SAET,WAAW,KAAX,EAAe,WAAf,C;SiDtCA,mBAAe,QAAf,C;sBGEmB,I;;;;;"}